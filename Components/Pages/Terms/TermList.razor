@using Clarity_Crate.Services
@using Clarity_Crate.Models
@using Clarity_Crate.Dtos
@inject TermService TermService
@inject LevelService LevelService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager




<div class="m-auto mt-5">
    @if (TermService.isGettingItems)
    {
        <MudProgressLinear Size="Size.Large" Color="Color.Primary" Indeterminate="true" Class="my-7 mt-12" />

    }
    else
    {
        @if (Terms.Count == 0)
        {
            <div class="alert alert-info mt-4" role="alert">
                <p class="mb-1">No terms found.</p>
            </div>
        }
        else
        {
            <!--MudBlazor table that show a list of Terms -->
            <!--Each Term shows its levels,and definition-->
            <MudTable Items="Terms" Hover="true" Filter="new Func<Term,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" CanCancelEdit="true"
                      OnCommitEditClick="@(() =>OnRowEditSave())" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
                      RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Terms and their definitions</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<Term, object>(x=>x.Name)">Term</MudTableSortLabel></MudTh>
                    <MudTh>Level</MudTh>
                    <MudTh>Definition</MudTh>
                    <MudTh>Delete</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Term">@context.Name</MudTd>
                    <MudTd DataLabel="Level">
                        @foreach (var level in context.Levels)
                        {
                            <MudChip Variant="Variant.Filled" Color="Color.Primary" Class="m-1">@level.Name</MudChip>
                        }
                    </MudTd>
                    <MudTd Class="fst-italic" DataLabel="Definition">
                        @context.Definition.Content
                    </MudTd>
                    <MudTd DataLabel="Delete">
                        <MudButton Class="ms-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => Delete(context.Id))">Delete</MudButton>
                    </MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Term"><MudTextField @bind-Value="@context.Name" Required /></MudTd>
                    <MudTd DataLabel="Level">
                        <!-- The attribute bind-SelectedValues requires an IEnumerable value-->
                        <MudSelect Required T="Level" Label="Level" ToStringFunc="@levelConverter" MultiSelection="true" @bind-SelectedValues="@context.Levels">
                            @foreach (var level in Levels)
                            {
                                <MudSelectItem T="Level" Value="@level">@level.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>
                    <MudTd DataLabel="Definition">
                        <MudTextField AutoGrow HelperText="The definition of the term" @bind-Value="@context.Definition.Content" Required />
                    </MudTd>



                </RowEditingTemplate>

                <PagerContent>
                    <MudTablePager />
                </PagerContent>

            </MudTable>

        }
    }


</div>






<!--update curriculum dialog-->
@code {
    private List<Term> Terms = new List<Term>();
    private string searchString1 = "";
    private Term selectedItem1 = null;
    private Term elementBeforeEdit;
    private List<Level> Levels = new List<Level>();

    [Inject] private IDialogService DialogService { get; set; }

    private bool blockSwitch = false;

    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;







    //get all the Terms component is initialized

    protected override async Task OnInitializedAsync()
    {
        await TermService.GetTerms();
        await LevelService.GetLevels();

        Terms = TermService.Terms;
        Levels = LevelService.Levels;


    }


    //delete method
    private async Task Delete(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
          "Delete?",
          "Are you certain you wish to delete this term?",
          yesText: "Delete", cancelText: "Cancel");

        var state = result == null ? "Cancel" : "Delete";

        //if result is not null, then its confirmed
        if (state.Equals("Delete"))
        {
            bool isSuccess = await TermService.DeleteTerm(id);
            if (isSuccess)
            {

                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
                Snackbar.Add("Term deleted successfully!", Severity.Success);

                await TermService.GetTerms();
                Terms = TermService.Terms;


                StateHasChanged();
            }
            else
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
                Snackbar.Add("An error occurred while deleting the Term", Severity.Error);
            }
        }


    }
    //edit method
    private void Edit(int id)
    {

        //redirect to the edit page
        NavigationManager.NavigateTo($"/Terms/edit/{id}");
    }

    private bool FilterFunc1(Term element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Term element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Term)element).Name = elementBeforeEdit.Name;
        ((Term)element).Definition = elementBeforeEdit.Definition;
        ((Term)element).Levels = elementBeforeEdit.Levels;

    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {

                Name = ((Term)element).Name,
                Definition = ((Term)element).Definition,
                Levels = ((Term)element).Levels

            };
    }

    private void ItemHasBeenCommitted(object element)
    {

    }

    private async Task OnRowEditSave()
    {
        await TermService.UpdateTerm(selectedItem1);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Add("Term updated successfully!", Severity.Success);
    }


    Func<Level, string> levelConverter = l => l?.Name;




}


