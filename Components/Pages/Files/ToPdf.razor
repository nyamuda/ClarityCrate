@page "/convert-to-pdf"

@using Clarity_Crate.Services
@inject FileService FileService
@inject AppService AppService
@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor.Inputs
@inject NavigationManager NavigationManager

<PageTitle>Convert to PDF</PageTitle>


<style>

    .e-upload.e-control-wrapper, .e-bigger.e-small .e-upload.e-control-wrapper {
        min-height: 7rem;
    }

    .primary-bg-color {
    }


    .primary-text-color {
    }





    /*** Facility ***/
    .facility-item .facility-icon {
        position: relative;
        margin: 0 auto;
        width: 100px;
        height: 100px;
        display: flex;
        align-items: center;
        justify-content: center;
        clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

        .facility-item .facility-icon::before {
            position: absolute;
            content: "";
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            background: rgba(255, 255, 255, .9);
            transition: .5s;
            z-index: 1;
        }

        .facility-item .facility-icon span {
            display: none;
            position: absolute;
            content: "";
            width: 15px;
            height: 30px;
            top: 0;
            left: 0;
            border-radius: 50%;
        }

            .facility-item .facility-icon span:last-child {
                left: auto;
                right: 0;
            }

        .facility-item .facility-icon i {
            position: relative;
            z-index: 2;
        }

    .facility-item .facility-text {
        position: relative;
        min-height: 250px;
        padding: 30px;
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
        flex-direction: column;
        clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

        .facility-item .facility-text::before {
            position: absolute;
            content: "";
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            background: rgba(255, 255, 255, .9);
            transition: .5s;
            z-index: 1;
        }

        .facility-item .facility-text * {
            position: relative;
            z-index: 2;
        }

    .facility-item:hover .facility-icon::before,
    .facility-item:hover .facility-text::before {
        background: transparent;
    }

    .facility-item * {
        transition: .5s;
    }

    .facility-item:hover * {
        color: #FFFFFF !important;
    }

</style>




<div class="container mt-5">
    <div id="convert-to-pdf" class="text-start mb-5">
        <p class="h1">Convert files to PDF</p>
        <p>We support various document and image file types for uploading and converting to PDF.</p>
        <p>Choose your file, and we’ll handle the conversion.</p>
    </div>
    <!-- File Upload Section -->
    <div>
        <h5>Upload your file</h5>
        <SfUploader ID="UploadFiles" AllowMultiple="false" AllowedExtensions="@_allSupportedFileExtensions">
            <Syncfusion.Blazor.Inputs.UploaderEvents ValueChange="@FileUploaded" OnRemove="OnFileRemove"></Syncfusion.Blazor.Inputs.UploaderEvents>
        </SfUploader>
    </div>


    <!--PDF Viewer-->
    <div id="pdf-viewer" class="">
        <MudCollapse Expanded="_showPdf">
            <SfPdfViewer2 @ref="@PdfViewer"
                          Height="100%"
                          Width="100%">
            </SfPdfViewer2>
        </MudCollapse>
    </div>

    <!-- Convert to PDF Button -->
    @if (_isFileUploaded)
    {

        @if (FileService.IsConvertingToPdf)
        {
            <div class="d-flex justify-content-start mt-3">
                <MudButton class="blue-grey darken-4 text-light cursor-progress mt-1" Variant="Variant.Filled">
                    Converting...
                </MudButton>
            </div>


        }
        else if (FileService.ConvertedResultingPdf == null)
        {
            <div class="d-flex justify-content-start mt-3">
                <MudButton Class="blue-grey darken-4 text-light mt-1" Variant="Variant.Filled" StartIcon="fas fa-file-alt" OnClick="ConvertToPdf">
                    Convert to PDF
                </MudButton>
            </div>
        }
        <!--View PDF or download PDF buttons-->
        else
        {
            <div class="d-flex justify-content-start mt-3">
                <MudButton Class="mr-3" Variant="Variant.Outlined" Color="Color.Dark" StartIcon="@Icons.Material.Filled.Download" OnClick="() => DownloadPdf(FileService.ConvertedResultingPdf)">
                    Download PDF
                </MudButton>
                @if (_showPdf)
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" StartIcon="far fa-eye-slash" OnClick="() => ToggleViewPdf()">
                        Hide PDF
                    </MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="far fa-eye" OnClick="() => ToggleViewPdf()">
                        View PDF
                    </MudButton>
                }
            </div>
        }
    }



    <!-- Supported File Types Start -->
    <div class="py-5 mt-5">
        <div class="">



            <div class="row g-4">
                <!-- PDF -->
                <!--<div class="col-lg-3 col-sm-6 wow fadeInUp" data-wow-delay="0.1s">
                    <div class="facility-item">
                        <div class="facility-icon bg-danger">
                            <span class="bg-primary"></span>
                            <i class="fa fa-file-pdf fa-3x text-danger"></i>
                            <span class="bg-danger"></span>
                        </div>
                        <div class="facility-text bg-danger">
                            <h3 class="text-danger mb-3">Scanned Files</h3>
                            <p class="mb-0">Easily convert scanned PDF files into a more editable or shareable format.</p>
                        </div>
                    </div>
                </div>-->
                <!-- Images -->
                <div class="col-lg-3 col-sm-6 wow fadeInUp" data-wow-delay="0.7s">
                    <div class="facility-item">
                        <div class="facility-icon orange darken-3">
                            <span class="orange darken-3"></span>
                            <i class="fa fa-file-image fa-3x orange-text text-darken-3"></i>
                            <span class="orange darken-3"></span>
                        </div>
                        <div class="facility-text orange darken-3">
                            <h3 class="orange-text text-darken-3 mb-3">Image Files</h3>
                            <p class="mb-0">Convert common image formats such as .jpg, .png, .gif, .bmp, etc. into PDF documents.</p>
                        </div>
                    </div>
                </div>

                <!-- Excel -->
                <div class="col-lg-3 col-sm-6 wow fadeInUp" data-wow-delay="0.3s">
                    <div class="facility-item">
                        <div class="facility-icon teal darken-1">
                            <span class="teal darken-1"></span>
                            <i class="fa fa-file-excel fa-3x teal-text text-darken-1"></i>
                            <span class="teal darken-1"></span>
                        </div>
                        <div class="facility-text teal darken-1">
                            <h3 class="teal-text text-darken-1 mb-3">Excel Files</h3>
                            <p class="mb-0">Convert your Excel sheets to PDF with ease, preserving all your data and formatting (.xlsx, .xls).</p>
                        </div>
                    </div>
                </div>

                <!--PowerPoint-->
                <div class="col-lg-3 col-sm-6 wow fadeInUp" data-wow-delay="0.5s">
                    <div class="facility-item">
                        <div class="facility-icon orange darken-3">
                            <span class="orange darken-3"></span>
                            <i class="fa fa-file-powerpoint fa-3x orange-text text-darken-3"></i>
                            <span class="orange darken-3"></span>
                        </div>
                        <div class="facility-text orange darken-3">
                            <h3 class="orange-text text-darken-3 mb-3">PowerPoint</h3>
                            <p class="mb-0">Convert your PowerPoint presentations into PDF, making them easily viewable and sharable (.pptx, .ppt).</p>
                        </div>
                    </div>
                </div>

                <!-- Word -->
                <div class="col-lg-3 col-sm-6 wow fadeInUp" data-wow-delay="0.5s">
                    <div class="facility-item">
                        <div class="facility-icon teal darken-1">
                            <span class="teal darken-1"></span>
                            <i class="fa fa-file-word fa-3x teal-text text-darken-1"></i>
                            <span class="teal darken-1"></span>
                        </div>
                        <div class="facility-text teal darken-1">
                            <h3 class="teal-text text-darken-1 mb-3">Word</h3>
                            <p class="mb-0">Convert your Word documents into PDFs, making them easier to read, share, and print (.docx, .doc).</p>
                        </div>
                    </div>
                </div>



                <!-- Text Files -->
                <div class="col-lg-3 col-sm-6 wow fadeInUp" data-wow-delay="0.9s">
                    <div class="facility-item">
                        <div class="facility-icon orange darken-3">
                            <span class="orange darken-3"></span>
                            <i class="fa fa-file-alt fa-3x orange-text text-darken-3"></i>
                            <span class="orange darken-3"></span>
                        </div>
                        <div class="facility-text orange darken-3">
                            <h3 class="orange-text text-darken-3 mb-3">Text & Markup</h3>
                            <p class="mb-0">Easily convert plain text and markup files into PDFs for better accessibility (.txt, .md, .html).</p>
                        </div>
                    </div>
                </div>


            </div>
        </div>
    </div>
    <!-- Supported File Types End -->

</div>





@code {
    // All supported file extensions
    private string _allSupportedFileExtensions = ".xlsx, .xls, .pptx, .ppt, .doc, .docx, .xml, .dot, .dotx, .docm, .dotm, .rtf, .txt, .md, .html, .jpeg, .jpg, .png, .bmp, .gif, .tiff, .tif, .emf, .ico, .icon";
    // Supported Word file extensions
    private string[] _supportedWordExtensions = new[]
    {
    ".doc", ".docx", ".xml", ".dot", ".dotx", ".docm", ".dotm",
    ".rtf", ".txt", ".md", ".html"
    };
    // Supported image file extensions
    private readonly string[] _supportedImageExtensions =
        { ".jpeg", ".jpg", ".png", ".bmp", ".gif", ".tiff", ".tif", ".emf", ".ico", ".icon" };

    private MemoryStream _uploadedFileStream;
    private string _fileExtension;
    private string _fileName;
    private bool _isFileUploaded = false;
    private bool _showPdf = false;
    private bool _isConvertingToPdf = false;
    private SfPdfViewer2 PdfViewer { get; set; }
    private string _documentPath { get; set; } = "wwwroot/data/pdf1.pdf";
    bool _expanded = true;



    private async Task FileUploaded(Syncfusion.Blazor.Inputs.UploadChangeEventArgs args)
    {
        try
        {

            // Reset state before new upload
            FileService.ConvertedResultingPdf = null;
            _uploadedFileStream = new MemoryStream();
            _isFileUploaded = false;

            // Handle file upload
            var file = args.Files.FirstOrDefault(); // Single file upload
            if (file != null)
            {
                // Get file name and without the extension
                _fileName = Path.GetFileNameWithoutExtension(file.File.Name);

                // Get file extension
                _fileExtension = Path.GetExtension(file.File.Name?.ToLower());
                // Save file to memory stream
                await file.File.OpenReadStream(long.MaxValue).CopyToAsync(_uploadedFileStream);
                _uploadedFileStream.Position = 0; // Reset stream position for further use
                _isFileUploaded = true; // Show "Convert to PDF" button
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"File upload failed: {ex.Message}");
        }
    }

    private async Task ConvertToPdf()
    {
        if (_uploadedFileStream != null)
        {
            //show loader
            FileService.IsConvertingToPdf = true;

            // Pass the MemoryStream to your PDF conversion logic
            await HandlePdfConversion(_uploadedFileStream);
        }
    }

    private async Task HandlePdfConversion(Stream fileStream)
    {

        try
        {


            //Excel file
            if (_fileExtension == ".xlsx" || _fileExtension == ".xls")
            {
                // Convert Excel to PDF
                using (var pdfStream = FileService.ConvertExcelToPdf(_uploadedFileStream))
                {
                    // Save the PDF as a byte array
                    using (var memoryStream = new MemoryStream())
                    {
                        pdfStream.CopyTo(memoryStream);
                        memoryStream.Position = 0;
                        FileService.ConvertedResultingPdf = memoryStream.ToArray();

                    }


                }
            }
            //PowerPoint file
            else if (_fileExtension == ".pptx" || _fileExtension == ".ppt")
            {
                // Convert Excel to PDF and then extract text
                using (var pdfStream = FileService.ConvertPowerPointToPdf(_uploadedFileStream))
                {
                    // Save the PDF as a byte array
                    using (var memoryStream = new MemoryStream())
                    {
                        pdfStream.CopyTo(memoryStream);
                        memoryStream.Position = 0;
                        FileService.ConvertedResultingPdf = memoryStream.ToArray();

                    }
                }
            }
            //Word extensions
            else if (_supportedWordExtensions.Contains(_fileExtension))
            {
                // Convert Word to PDF and then extract text
                using (var pdfStream = FileService.ConvertWordToPdf(_uploadedFileStream))
                {
                    // Save the PDF as a byte array
                    using (var memoryStream = new MemoryStream())
                    {
                        pdfStream.CopyTo(memoryStream);
                        memoryStream.Position = 0;
                        FileService.ConvertedResultingPdf = memoryStream.ToArray();

                    }
                }
            }
            //Image extensions
            else if (_supportedImageExtensions.Contains(_fileExtension))
            {
                // Convert image to PDF and then extract text
                using (var pdfStream = FileService.ConvertImageToPdf(_uploadedFileStream))
                {
                    // Save the PDF as a byte array
                    using (var memoryStream = new MemoryStream())
                    {
                        pdfStream.CopyTo(memoryStream);
                        memoryStream.Position = 0;
                        FileService.ConvertedResultingPdf = memoryStream.ToArray();

                    }
                }
            }


            else
            {


                //show error message
                var message = $"The file type {_fileExtension} is not supported for conversion to PDF.";
                AppService.ShowSnackBar(message: message, severity: "error");
                //remove uploaded file
                _uploadedFileStream = null;
                _isFileUploaded = false;
                FileService.ConvertedResultingPdf = null;

                //hide loader
                FileService.IsConvertingToPdf = false;

            }

            //Load the converted PDF using a PDF viewer
            if (FileService.ConvertedResultingPdf != null)
            {
                await LoadDocument(FileService.ConvertedResultingPdf);
            }



        }
        catch (Exception ex)
        {
            //hide loader
            _isConvertingToPdf = false;
            //show error message
            var message = $"An error occurred: {ex.Message}";
            AppService.ShowSnackBar(message: message, severity: "error");

            //hide loader
            FileService.IsConvertingToPdf = false;
        }
    }

    public void OnFileRemove(RemovingEventArgs args)
    {
        _isFileUploaded = false;
        _documentPath = "";
        _showPdf = false;
    }

    private async Task DownloadPdf(byte[] pdfBytes)
    {
        // Trigger the download with the correct file name
        await TriggerDownload(pdfBytes, _fileName);


    }

    private async Task TriggerDownload(byte[] fileBytes, string fileName)
    {
        var base64Data = Convert.ToBase64String(fileBytes);
        var fileUrl = $"data:application/pdf;base64,{base64Data}";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);

        //show snack bar message
        //that the file has been downloaded
        AppService.ShowSnackBar(message: "File downloaded successfully");
    }
    //Toggle view PDF
    private async Task ToggleViewPdf()
    {
        _showPdf = !_showPdf;

        if (_showPdf)
        {
            await JSRuntime.InvokeVoidAsync("scrollToElement", "pdf-viewer");
        }

        else
        {
            await JSRuntime.InvokeVoidAsync("scrollToElement", "convert-to-pdf");
        }
    }



    public async Task LoadDocument(byte[] pdfByte)
    {
        string base64String = Convert.ToBase64String(pdfByte);
        await PdfViewer.LoadAsync("data:application/pdf;base64," + base64String, null);

        //hide loader
        FileService.IsConvertingToPdf = false;
    }

}