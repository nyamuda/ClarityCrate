@page "/definitions"
@using Clarity_Crate.Services
@using Clarity_Crate.Models
<PageTitle>Definitions</PageTitle>
@inject NavigationManager NavigationManager
@inject CurriculumService CurriculumService
@inject SubjectService SubjectService
@inject TopicService TopicService
@inject LevelService LevelService
@inject TermService TermService



<div class="container text-center py-5 mt-15">
   
    <!--Search terms-->
    <div>
        <EditForm Model="@SearchItem" OnValidSubmit="SearchTerm" FormName="SearchItem">

            <MudTextField @bind-Value="Search" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />

        </EditForm>
    </div>
    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-5 mt-2">

        <div class="col mb-2">
            <MudSelect ValueChanged=" OnCurriculumChanged" T="Curriculum" Label="Select curriculum" Clearable=true Variant="Variant.Outlined">
                @foreach (var curriculum in curriculums)
                {
                    <MudSelectItem T="Curriculum" Value="@curriculum">@curriculum.Name</MudSelectItem>
                }
            </MudSelect>
        </div>

        <div class="col mb-2">
            <MudSelect ValueChanged="OnSubjectChanged" T="Subject" Label="Select subject" Clearable=true Variant="Variant.Outlined">
                @foreach (var subject in subjects)
                {
                    <MudSelectItem T="Subject" Value="@subject">@subject.Name</MudSelectItem>
                }

            </MudSelect>
        </div>

        <div class="col mb-2">
            <MudSelect ValueChanged="OnTopicChanged" T="Topic" Label="Select topic" ToStringFunc="@topicConverter" Clearable=true Variant="Variant.Outlined">
                @foreach (var topic in topics)
                {
                    <MudSelectItem T="Topic" Value="@topic">@topic.Name</MudSelectItem>
                }
            </MudSelect>
        </div>

        <div class="col mb-2">
            <MudSelect ValueChanged="OnLevelChanged" T="Level" Label="Select level" ToStringFunc="@levelConverter" Clearable=true Variant="Variant.Outlined">
                @foreach (var level in levels)
                {
                    <MudSelectItem T="Level" Value="@level">@level.Name</MudSelectItem>
                }
            </MudSelect>
        </div>

        <div class="col d-flex justify-content-start mt-2 mt-md-0 align-items-center">
            <MudButton OnClick="Filter" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FilterAlt" Color="Color.Dark" Size="Size.Medium">Filter</MudButton>
        </div>

    </div>

    <!--List Terms-->
    @if (TermService.isSearching)
    {
        <MudProgressLinear Size="Size.Large" Color="Color.Primary" Indeterminate="true" Class="my-7 mt-12" />

    }
    else
    {
        @if (terms.Count == 0)
        {
            <div class="alert alert-info mt-4" role="alert">
                <p class="mb-1">No terms found.</p>
            </div>
        }
        else
        {
            <!--MudBlazor table that show a list of Terms -->
            <!--Each Term shows its levels, subject, and definition-->
            <MudTable Class="mt-5" Items="@terms" Dense="true" Bordered="true" Striped="true" @bind-SelectedItem="SelectedTerm">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Terms</MudText>

                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Term, object>(x=>x.Name)">Term</MudTableSortLabel></MudTh>
                    <MudTh Class="d-none d-md-block">Level</MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Term, object>(x=>x.Definition.Topic.Name)">Topic</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Term, object>(x=>x.Definition.Subject.Name)">Subject</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Term, object>(x=>x.Definition.Curriculum.Name)">Curriculum</MudTableSortLabel></MudTh>
                    <MudTh>Definition</MudTh>

                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Term">@context.Name</MudTd>

                    <MudTd Class="d-none d-md-block" DataLabel="Level">
                        @foreach (var level in context.Levels)
                        {
                            <MudChip Variant="Variant.Filled" Color="Color.Primary" Class="m-1">@level.Name</MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="Topic">@context.Definition.Topic.Name</MudTd>
                    <MudTd DataLabel="Subject">@context.Definition.Subject.Name</MudTd>
                    <MudTd DataLabel="Curriculum">@context.Definition.Curriculum.Name</MudTd>
                    <MudTd DataLabel="Definition">@context.Definition.Content</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>

        }
    }

</div>


@code {
    public string? Search { get; set; } = "";
    public Curriculum? SelectedCurriculum { get; set; } = new Curriculum();
    public Subject? SelectedSubject { get; set; } = new Subject();
    public Topic? SelectedTopic { get; set; } = new Topic();
    public Level? SelectedLevel { get; set; } = new Level();
    public Term? SelectedTerm { get; set; } = new Term();
    public SearchItem SearchItem { get; set; } = new SearchItem();

    private List<Curriculum> curriculums = new List<Curriculum>();
    private List<Subject> subjects = new List<Subject>();
    private List<Topic> topics = new List<Topic>();
    private List<Level> levels = new List<Level>();
    private List<Term> terms = new List<Term>();


    protected override async Task OnInitializedAsync()
    {
        //curriculums
        await CurriculumService.GetCurricula();
        curriculums = CurriculumService.Curriculums;

        //subjects
        await SubjectService.GetSubjects();
        subjects = SubjectService.Subjects;

        //topics
        await TopicService.GetTopics();
        topics = TopicService.Topics;

        //levels
        await LevelService.GetLevels();
        levels = LevelService.Levels;

    }


    //get the subjects for the selected curriculum
    public async Task OnCurriculumChanged(Curriculum curriculum)
    {
        //this method is also invoked when the curriculum is cleared
        //in that case that passed curriculum will be null
        SelectedCurriculum = curriculum != null ? curriculum : new Curriculum();

        subjects = await SubjectService.FilterSubjectByCurriculum(SelectedCurriculum.Id);
    }

    //get the topics for the selected subject
    public async Task OnSubjectChanged(Subject subject)
    {
        //this method is also invoked when the subject is cleared
        //in that case that passed subject will be null
        SelectedSubject = subject != null ? subject : new Subject();

        topics = await TopicService.FilterTopicsBySubject(SelectedSubject.Id);
    }

    //
    public async void OnTopicChanged(Topic topic)
    {
        //this method is also invoked when the topic is cleared
        //in that case that passed topic will be null
        SelectedTopic = topic != null ? topic : new Topic();


    }
    public async void OnLevelChanged(Level level)
    {
        //this method is also invoked when the topic is cleared
        //in that case that passed topic will be null
        SelectedLevel = level != null ? level : new Level();
    }


    //Filter terms
    public async Task Filter()
    {
        //get the ids of the selected
        //curriculum, subject, topic and level
        int curriculumId = SelectedCurriculum.Id;
        int subjectId = SelectedSubject.Id;
        int topicId = SelectedTopic.Id;
        int levelId = SelectedLevel.Id;


        //search for the term
        terms = await TermService.FilterTerms(Search, curriculumId, subjectId, topicId, levelId);
    }

    //Search for a term
    public async Task SearchTerm()
    {
        terms = await TermService.SearchTerm(Search);

    }

    //convert the selected topic to a string
    Func<Topic, string> topicConverter = t => t?.Name;
    //convert the selected level to a string
    Func<Level, string> levelConverter = l => l?.Name;



}
