@page "/definitions"
@using Clarity_Crate.Services
@using Clarity_Crate.Models
@using Clarity_Crate.Components.Pages.Flashcards
<PageTitle>Definitions</PageTitle>
@inject NavigationManager NavigationManager
@inject CurriculumService CurriculumService
@inject SubjectService SubjectService
@inject TopicService TopicService
@inject LevelService LevelService
@inject TermService TermService
@inject IJSRuntime JSRuntime




<div id="term-definitions" class="container text-center">

    <!--Search terms-->
    <div>
        <EditForm Model="@SearchItem" OnValidSubmit="Filter" FormName="SearchItem">

            <MudTextField @bind-Value="Search" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End"
                AdornmentIcon="@Icons.Material.Filled.Search"
                HelperText="Enter the term that you want to know how to define or state, e.g., 'Newton's second law.'" />

        </EditForm>
    </div>


    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-5 mt-2">

        <div class="col mb-2">
            <MudSelect ValueChanged=" OnCurriculumChanged" T="Curriculum" Label="Select curriculum" Clearable=true
                Variant="Variant.Outlined" Disabled="@(!curriculums.Any())">
                @foreach (var curriculum in curriculums)
                {
                    <MudSelectItem T="Curriculum" Value="@curriculum">@curriculum.Name</MudSelectItem>
                }
            </MudSelect>
        </div>

        <div class="col mb-2">
            <MudSelect ValueChanged="OnSubjectChanged" T="Subject" Label="Select subject" Clearable=true
                Variant="Variant.Outlined" Disabled="@(!subjects.Any())">
                @foreach (var subject in subjects)
                {
                    <MudSelectItem T="Subject" Value="@subject">@subject.Name</MudSelectItem>
                }

            </MudSelect>
        </div>

        <div class="col mb-2">
            <MudSelect ValueChanged="OnTopicChanged" T="Topic" Label="Select topic" ToStringFunc="@topicConverter"
                Clearable=true Variant="Variant.Outlined" Disabled="@(!topics.Any())">
                @foreach (var topic in topics)
                {
                    <MudSelectItem T="Topic" Value="@topic">@topic.Name</MudSelectItem>
                }
            </MudSelect>
        </div>

        <div class="col mb-2">
            <MudSelect ValueChanged="OnLevelChanged" T="Level" Label="Select level" ToStringFunc="@levelConverter"
                Clearable=true Variant="Variant.Outlined" Disabled="@(!levels.Any())">
                @foreach (var level in levels)
                {
                    <MudSelectItem T="Level" Value="@level">@level.Name</MudSelectItem>
                }
            </MudSelect>
        </div>

        <div class="col d-flex justify-content-start mt-2 mt-md-0 align-items-center">
            <MudButton Color="Color.Dark" OnClick="Filter" Variant="Variant.Filled"
                StartIcon="@Icons.Material.Filled.FilterAlt" Size="Size.Medium">Filter</MudButton>
        </div>

    </div>

    <!--List Terms-->
    @if (TermService.isSearching)
    {
        <MudProgressLinear Size="Size.Large" Color="Color.Primary" Indeterminate="true" Class="my-7 mt-12" />

    }

    @if (!_hasSearched)
    {
        <div class="mt-4 text-center">
            <MudIcon Icon="@Icons.Material.Filled.Explore" Size="Size.Large" Color="Color.Dark" />
            <MudText Typo="Typo.h5" Color="Color.Dark">Start Exploring!</MudText>
            <MudText Typo="Typo.body1">
                Enter a term to begin your search.
            </MudText>

        </div>

    }

    else if (_hasSearched && terms.Count == 0 && !TermService.isSearching)
    {
        <div class="mt-4 text-center">

            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Error" />
            <MudText Typo="Typo.h5" Color="Color.Primary">No Results Found</MudText>
            <MudText Typo="Typo.body1">
                Sorry, we couldn't find any items matching your search. Please try again with different terms.
            </MudText>


        </div>
    }
    else
    {
        <div>
            <div class="row">
                @foreach (var term in terms)
                {
                    <div class="col-lg-4">
                        <FlashcardItem Term="@(term)" />
                    </div>
                }

            </div>
            <!--Display MudPagination if the is at least one item-->
            @if (terms.Any())
            {
                <div class="mt-5">
                    <MudPagination Size="Size.Medium" Color="Color.Dark" SelectedChanged="GoToPage" Selected="_currentPage"
                        BoundaryCount="@BOUNDARY_COUNT" MiddleCount="@MIDDLE_COUNT" Count="@_totalPages" ShowFirstButton="true"
                        ShowLastButton="true" />
                </div>
            }
        </div>
    }

</div>


@code {
    public string? Search { get; set; } = "";
    public Curriculum? SelectedCurriculum { get; set; } = new Curriculum();
    public Subject? SelectedSubject { get; set; } = new Subject();
    public Topic? SelectedTopic { get; set; } = new Topic();
    public Level? SelectedLevel { get; set; } = new Level();
    public Term? SelectedTerm { get; set; } = new Term();
    public SearchItem SearchItem { get; set; } = new SearchItem();
    private bool _hasSearched = false;

    private List<Curriculum> curriculums = new List<Curriculum>();
    private List<Subject> subjects = new List<Subject>();
    private List<Topic> topics = new List<Topic>();
    private List<Level> levels = new List<Level>();
    private List<Term> terms = new List<Term>();

    //pagination info
    private int _totalPages = 1;
    private int _currentPage = 1;
    private const int BOUNDARY_COUNT = 4;
    private const int MIDDLE_COUNT = 3;



    protected override async Task OnInitializedAsync()
    {
        //curriculums
        await CurriculumService.GetCurricula();
        curriculums = CurriculumService.Curriculums;

        //subjects
        await SubjectService.GetSubjects();
        subjects = SubjectService.Subjects;

        //topics
        await TopicService.GetTopics();
        topics = TopicService.Topics;

        //levels
        await LevelService.GetLevels();
        levels = LevelService.Levels;

    }


    //get the subjects for the selected curriculum
    public async Task OnCurriculumChanged(Curriculum curriculum)
    {
        //this method is also invoked when the curriculum is cleared
        //in that case that passed curriculum will be null
        SelectedCurriculum = curriculum != null ? curriculum : new Curriculum();

        subjects = await SubjectService.FilterSubjectByCurriculum(SelectedCurriculum.Id);
    }

    //get the topics for the selected subject
    public async Task OnSubjectChanged(Subject subject)
    {
        //this method is also invoked when the subject is cleared
        //in that case that passed subject will be null
        SelectedSubject = subject != null ? subject : new Subject();

        topics = await TopicService.FilterTopicsBySubject(SelectedSubject.Id);
    }

    //when a topic is changed
    public async void OnTopicChanged(Topic topic)
    {
        //this method is also invoked when the topic is cleared
        //in that case that passed topic will be null
        SelectedTopic = topic != null ? topic : new Topic();


    }
    public async void OnLevelChanged(Level level)
    {
        //this method is also invoked when the topic is cleared
        //in that case that passed topic will be null
        SelectedLevel = level != null ? level : new Level();
    }


    //Filter terms
    public async Task Filter()
    {
        _hasSearched = true;
        //get the ids of the selected
        //curriculum, subject, topic and level
        int curriculumId = SelectedCurriculum.Id;
        int subjectId = SelectedSubject.Id;
        int topicId = SelectedTopic.Id;
        int levelId = SelectedLevel.Id;


        //filter the terms
        var pageInfo = await TermService.FilterTerms(Search, curriculumId, subjectId, topicId, levelId, pageNumber:
        _currentPage);

        terms = pageInfo.Items;
        _totalPages = pageInfo.TotalPages;
    }


    //Go to another page using the pagination
    public async Task GoToPage(int pageNumber)
    {
        _currentPage = pageNumber;

        await Filter();

        await ScrollToSection();

    }

    private async Task ScrollToSection()
    {
        await JSRuntime.InvokeVoidAsync("scrollToElement", "term-definitions");
    }

    //convert the selected topic to a string
    Func<Topic, string> topicConverter = t => t?.Name;
    //convert the selected level to a string
    Func<Level, string> levelConverter = l => l?.Name;



}
