
@inject TopicService TopicService
@inject SubjectService SubjectService
@using Clarity_Crate.Services
@using Clarity_Crate.Dtos
@inject NavigationManager NavigationManager
@inject AppService AppService
@using Clarity_Crate.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@page "/admin/add-topic"
<PageTitle>Add Topic</PageTitle>


<div class="container text-start m-auto">
    <h1 class="display-6">Add a new topic</h1>

    <EditForm class="py-3 px-4 shadow" Model="@TopicDto" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />


        <div class="mb-3">

            <MudTextField Required @bind-Value="TopicDto.Name" Variant="Variant.Outlined"
                          For="@(() => TopicDto.Name)"
                          Immediate="true"
                          Label="Name" />


        </div>

      

        <MudSelect SelectAll="true" Required T="Subject" Label="Subject" ToStringFunc="@converter" MultiSelection="true" @bind-SelectedValues="TopicDto.SelectedSubjects" Variant="Variant.Outlined">
            @foreach (var subject in subjects)
            {
                <MudSelectItem T="Subject" Value="@subject">@subject.Name</MudSelectItem>
            }
        </MudSelect>





        <MudButton Class="mt-5" Disabled="@TopicService.isCreating" Variant="Variant.Filled" DisableElevation="true" Color="Color.Dark" ButtonType="ButtonType.Submit" Size="Size.Large">
            @if (TopicService.isCreating)
            {
                <MudProgressCircular Class="ms-n1 text-dark" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2 text-dark">Please wait...</MudText>
            }
            else
            {
                <MudText>Create</MudText>
            }
        </MudButton>
    </EditForm>


  

</div>
@code {
    private TopicCreateDto TopicDto { get; set; } = new TopicCreateDto();

    private List<Subject> subjects = new List<Subject>();


    private async Task HandleValidSubmit()
    {
        //check if a subject has been selected
        if(TopicDto.SelectedSubjects is null || !TopicDto.SelectedSubjects.Any())
        {
            AppService.ShowSnackBar("Please select at least one subject.", isSuccess: false);
            return;
        }
        //add the new curriculum to the database
        Topic topic= new Topic()
        {
            Name = TopicDto.Name, 
            Subjects = TopicDto.SelectedSubjects.ToList()
        };
       bool isSuccess= await TopicService.CreateTopic(topic);

        if (isSuccess)
        {
            //show snack bar
            string message = "Topic added successfully!";
            AppService.ShowSnackBar(message, isSuccess: true);
            //redirect to the topics page
            NavigationManager.NavigateTo("/topics");
        }
        else
        {
            //show snack bar with error message
            string message = "An error occurred while creating the topic";
            AppService.ShowSnackBar(message, false);
        }



    }
    protected override async Task OnInitializedAsync()
    {
       

        //get all the subjects
        await SubjectService.GetSubjects();
        subjects= SubjectService.Subjects;
    }


    Func<Subject, string> converter = s => s?.Name;

   
}