@inject TermService TermService
@inject TopicService TopicService
@inject LevelService LevelService
@inject CurriculumService CurriculumService
@inject SubjectService SubjectService
@inject AppService AppService
@using Clarity_Crate.Services
@using Clarity_Crate.Dtos
@inject NavigationManager NavigationManager
@using Clarity_Crate.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
<PageTitle>Add Term</PageTitle>
@page "/admin/add-term"


<div class="mt-15 container text-start m-auto">

    <h1 class="display-6">Add a new term</h1>
    <EditForm Model="@TermDto" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />


        <div class="mb-3">

            <MudTextField Required @bind-Value="TermDto.Name" Variant="Variant.Outlined" For="@(() => TermDto.Name)"
                Immediate="true" Label="Name" />


        </div>

        <div class="mb-3">

            <MudTextField Required T="string" For="@(() => TermDto.Definition)" Immediate="true" Label="Definition"
                Variant="Variant.Outlined" @bind-Value="TermDto.Definition" Lines="3" />


        </div>
        <div class="mb-3">

            <MudTextField AutoGrow HelperText="The keywords of the definition separated by a comma."
                @bind-Value="TermDto.Keywords" Variant="Variant.Outlined" For="@(() => TermDto.Keywords)"
                Immediate="true" Label="Keywords" />


        </div>

        <div class="mb-3">
            <!--Levels-->
            <MudSelect Required Variant="Variant.Outlined" T="Level" Label="Level" ToStringFunc="@levelConverter"
                MultiSelection="true" @bind-SelectedValues="TermDto.SelectedLevels">
                @foreach (var level in levels)
                {
                    <MudSelectItem T="Level" Value="@level">@level.Name</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div class="mb-3">
            <!--Curriculums-->
            <MudSelect Required ValueChanged="FilterSubjects" HelperText="The curriculum the term falls under."
                T="Curriculum" Label="Curriculum" Variant="Variant.Outlined" ToStringFunc="@curriculumConverter">
                @foreach (var curriculum in curriculums)
                {
                    <MudSelectItem Value="@curriculum">@curriculum.Name</MudSelectItem>
                }
            </MudSelect>

        </div>

        <div class="mb-3">
            <!--Subjects-->
            <!--Disable the subject select input if not curriculum is selected-->
            <MudSelect Required disabled="@(TermDto.Curriculum==null)" ValueChanged="FilterTopics"
                HelperText="The subject the term falls under." T="Subject" Label="Subject" Variant="Variant.Outlined"
                ToStringFunc="@subjectConverter">
                @foreach (var subject in subjects)
                {
                    <MudSelectItem Value="@subject">@subject.Name</MudSelectItem>
                }
            </MudSelect>
        </div>


        <div class="mb-3">
            <!--Topics-->
            <MudSelect Required disabled="@(TermDto.Subject==null)" @bind-Value="TermDto.Topic"
                HelperText="The topic the term falls under." T="Topic" Label="Topic" Variant="Variant.Outlined"
                ToStringFunc="@topicConverter">
                @foreach (var topic in topics)
                {
                    <MudSelectItem Value="@topic">@topic.Name</MudSelectItem>
                }
            </MudSelect>

        </div>


        <MudButton Class="" Disabled="@TermService.isCreating" Variant="Variant.Filled" DisableElevation="true"
            Color="Color.Dark" ButtonType="ButtonType.Submit">
            @if (TermService.isCreating)
            {
                <MudProgressCircular Class="ms-n1 text-dark" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2 text-dark">Please wait...</MudText>
            }
            else
            {
                <MudText>Create</MudText>
            }
        </MudButton>
    </EditForm>

</div>
@code {
    private TermCreateDto TermDto { get; set; } = new TermCreateDto();
    private List<Topic> topics = new List<Topic>();
    private List<Subject> subjects = new List<Subject>();
    private List<Curriculum> curriculums = new List<Curriculum>();
    private List<Level> levels = new List<Level>();




    //Submit form
    private async Task HandleValidSubmit()
    {
        //convert the keywords into a list
        string keywords = TermDto.Keywords is not null ? TermDto.Keywords : "";
        var keywordList = ConvertKeywordsToList(keywords);
        //first create a definition
        Definition definition = new Definition()
            {
                Content = TermDto.Definition,
                TopicId = TermDto.Topic.Id,
                CurriculumId = TermDto.Curriculum.Id,
                SubjectId = TermDto.Subject.Id,
                Keywords = keywordList,
                Levels = TermDto.SelectedLevels.ToList()


            };

        //then create a term
        Term term = new Term()
            {
                Name = TermDto.Name

            };

        await TermService.CreateTerm(term, definition);

        //show snack bar
        string message = "Term added successfully!";
        AppService.ShowSnackBar(message, isSuccess: true);

        //redirect to the terms page
        NavigationManager.NavigateTo("/admin/terms");

    }
    protected override async Task OnInitializedAsync()
    {
        //get all the topics, subjects, levels and curriculums
        await TopicService.GetTopics();
        await CurriculumService.GetCurricula();
        await SubjectService.GetSubjects();
        await LevelService.GetLevels();


        topics = TopicService.Topics;
        subjects = SubjectService.Subjects;
        curriculums = CurriculumService.Curriculums;
        levels = LevelService.Levels;
    }

    //filter the subjects based on the selected curriculum
    private void FilterSubjects(Curriculum selected)
    {
        //when a curriculum is selected
        //clear the subject and topic
        TermDto.Subject = null;
        TermDto.Topic = null;
        TermDto.Curriculum = selected;
        //a subject can have multiple curricula
        //get all the subjects that have the selected curriculum
        subjects = SubjectService.Subjects.Where(s => s.Curriculums.Any(c => c.Id == selected.Id)).ToList();

        StateHasChanged();


    }

    //filter the topics based on the selected subject
    private void FilterTopics(Subject selected)
    {

        TermDto.Subject = selected;
        //a topic can have multiple subjects
        //get all the topics that have the selected subject
        topics = TopicService.Topics.Where(t => t.Subjects.Any(s => s.Id == selected.Id)).ToList();

        StateHasChanged();
    }


    //convert comma separated keywords into a list
    private List<string> ConvertKeywordsToList(string keywords)
    {

        //first trim the keywords
        string trimmedKeywords = keywords.Trim();

        List<string> keywordList = trimmedKeywords.Split(",").ToList();

        return keywordList;

    }


    Func<Topic, string> topicConverter = t => t?.Name;
    Func<Subject, string> subjectConverter = s => s?.Name;
    Func<Curriculum, string> curriculumConverter = c => c?.Name;
    Func<Level, string> levelConverter = l => l?.Name;


}