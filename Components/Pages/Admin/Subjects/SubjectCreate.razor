@using Clarity_Crate.Services
@using Clarity_Crate.Dtos
@inject NavigationManager NavigationManager
@inject SubjectService SubjectService
@inject CurriculumService CurriculumService
@inject AppService AppService
@using Clarity_Crate.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
<PageTitle>Add Subject</PageTitle>
@page "/admin/add-subject"



<div class="container text-start m-auto">
    <h1 class="display-6">Add a new subject</h1>

    <EditForm class="py-3 px-4 shadow" Model="@SubjectCreateDto" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />


        <div class="mb-3">

            <MudTextField @bind-Value="SubjectCreateDto.Name" Variant="Variant.Outlined"
                For="@(() => SubjectCreateDto.Name)" Immediate="true" Label="Name" />



            <MudSelect SelectAll="true" Required Variant="Variant.Outlined" T="Curriculum" Label="Curriculum"
                ToStringFunc="@converter" MultiSelection="true"
                @bind-SelectedValues="SubjectCreateDto.SelectedCurriculums">
                @foreach (var curriculum in Curriculums)
                {
                    <MudSelectItem T="Curriculum" Value="@curriculum">@curriculum.Name</MudSelectItem>
                }
            </MudSelect>



        </div>

        <MudButton Disabled="@SubjectService.isCreating" Variant="Variant.Filled" DisableElevation="true"
            Color="Color.Dark" ButtonType="ButtonType.Submit" Size="Size.Large">
            @if (SubjectService.isCreating)
            {
                <MudProgressCircular Class="ms-n1 text-dark" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2 text-dark">Please wait...</MudText>
            }
            else
            {
                <MudText>Create</MudText>
            }
        </MudButton>
    </EditForm>

</div>
@code {
    private SubjectCreateDto SubjectCreateDto { get; set; } = new SubjectCreateDto();
    private List<Curriculum> Curriculums { get; set; } = new List<Curriculum>();



    private async Task HandleValidSubmit()
    {
        if (SubjectCreateDto.SelectedCurriculums == null || !SubjectCreateDto.SelectedCurriculums.Any())
        {
            AppService.ShowSnackBar(message:"Please select at least one curriculum.", severity:"error");
            return;
        }

        //new subject
        Subject subject = new Subject
            {
                Name = SubjectCreateDto.Name,
                Curriculums = SubjectCreateDto.SelectedCurriculums.ToList()

            };


        //add the subject to the database
        bool isSuccess = await SubjectService.CreateSubject(subject);


        if (isSuccess)
        {
            //show snack bar
            string message = "Subject added successfully!";
            AppService.ShowSnackBar(message:message, severity:"success");
            //redirect to the subjects page
            NavigationManager.NavigateTo("/admin/subjects");
        }
        else
        {
            //show snack bar
            string message = "An error occurred while creating the subject";
            AppService.ShowSnackBar(message:message, severity:"error");
        }



    }
    protected override async Task OnInitializedAsync()
    {
        //get all the curriculums
        await CurriculumService.GetCurricula();
        Curriculums = CurriculumService.Curriculums;
    }



    Func<Curriculum, string> converter = c => c?.Name;


}