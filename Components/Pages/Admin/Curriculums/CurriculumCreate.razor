@inject CurriculumService CurriculumService
@using Clarity_Crate.Services
@inject NavigationManager NavigationManager
@inject AppService AppService
@using Clarity_Crate.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@page "/admin/add-curriculum"
<PageTitle>Add Curriculum</PageTitle>


<div class="container mt-16 text-start m-auto">
    <h1 class="display-6">Add a new curriculum</h1>

    <EditForm class="py-3 px-4 shadow" Model="@Curriculum" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />


        <div class="mb-3">

            <MudTextField Variant="Variant.Outlined" @bind-Value="Curriculum.Name"
                          For="@(() => Curriculum.Name)"
                          Immediate="true"
                          Label="Name" />


        </div>


        <MudButton Disabled="@CurriculumService.isCreating" Variant="Variant.Filled" DisableElevation="true" Color="Color.Dark" ButtonType="ButtonType.Submit" Size="Size.Large">
            @if (CurriculumService.isCreating)
            {
                <MudProgressCircular Class="ms-n1 text-dark" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2 text-dark">Please wait...</MudText>
            }
            else
            {
                <MudText>Create</MudText>
            }
        </MudButton>
    </EditForm>

</div>
@code {
    private Curriculum? Curriculum { get; set; }


    private async Task HandleValidSubmit()
    {
        //add the new curriculum to the database
        await CurriculumService.PostCurriculum(Curriculum);


        //show snack bar
        string message = "Curriculum added successfully!";
        AppService.ShowSnackBar(message:message, severity:"success");

        //redirect to the curriculums page
        NavigationManager.NavigateTo("/admin/curriculums");

    }
    protected override async Task OnInitializedAsync()
    {
        Curriculum = new Curriculum();
    }
}