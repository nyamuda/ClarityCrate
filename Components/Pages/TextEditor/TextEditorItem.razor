@using Syncfusion.Blazor.RichTextEditor

<div class="">
    <div class="">
        <SfRichTextEditor @ref="EditorRef" EnableResize="false" ID="RT_Editor" AutoSaveOnIdle="true" SaveInterval="saveInterval" EnableTabKey="true" EnableXhtml="true" @bind-Value="@Value">

            <RichTextEditorToolbarSettings Items="@Tools" Type="@(ShowFullPanel?ToolbarType.MultiRow:ToolbarType.Expand)"></RichTextEditorToolbarSettings>
            <RichTextEditorExportPdf ServiceUrl="https://blazor.syncfusion.com/services/production/api/RichTextEditor/ExportToPdf" FileName="@GetFileName()" ></RichTextEditorExportPdf>
            <RichTextEditorExportWord ServiceUrl="https://blazor.syncfusion.com/services/production/api/RichTextEditor/ExportToDocx" FileName="@GetFileName()"></RichTextEditorExportWord>
            <RichTextEditorQuickToolbarSettings Table="@TableQuickToolbarItems" ShowOnRightClick="true" />
            <RichTextEditorImageSettings SaveUrl="@SaveURL" Path="@Path"></RichTextEditorImageSettings>
            <RichTextEditorIFrameSettings Enable="true" Attributes="@IframeAttributes" />
            <RichTextEditorEvents ValueChange="OnValueChanged" />
        </SfRichTextEditor>
        <p class="d-flex justify-content-end py-2 fw-bold pe-4 bg-light">@NumOfWords words</p>
    </div>
   
</div>
<style>
    

    @@media print {
        a, a:visited {
            color: blue !important;
            text-decoration: underline;
        }

            a[href^="javascript:"]:after, a[href^="#"]:after {
                content: "";
            }

            a[href]:after {
                content: "";
            }
    }

    sb-content div#navigation-btn,
    .sb-content .sb-toolbar-splitter {
        z-index: 0
    }
</style>
@code {
    private SfRichTextEditor EditorRef;
    private int saveInterval { get; set; } = 50;
    

    private Dictionary<string, object> IframeAttributes = new Dictionary<string, object>() {
        { "style", "padding: 3rem; min-height: 18.5rem;" }
    };
    [Parameter]
    public string FileName { get; set; } = "";
    [Parameter]
    public string EditorPurpose { get; set; } = "";
    [Parameter]
    public string PlaceholderText { get; set; } = "";
    [Parameter]
    public string Value { get; set; } = "";
    [Parameter]
    public int NumOfWords { get; set; } = 0;
    [Parameter]
    public bool ShowFullPanel { get; set; } = false;
    private string SaveURL = "https://blazor.syncfusion.com/services/production/api/RichTextEditor/SaveFile";
    private string Path = "https://blazor.syncfusion.com/services/production/RichTextEditor/";

    
    //get number of words
    private int WordCount(string text)
    {
        return string.IsNullOrWhiteSpace(text) ? 0 : text.Split(' ', StringSplitOptions.RemoveEmptyEntries).Length;
    }

    //get file name
    private string GetFileName()
    {
        if (string.IsNullOrEmpty(FileName))
        {
            return EditorPurpose+"_article";
        }
        else
        {
            var fullName = $"{EditorPurpose}_{FileName.ToLower()}";
            return fullName;
        }
    }
    //when the value changes
    public void OnValueChanged()
    {
       Console.WriteLine("Value Changed");
        NumOfWords = WordCount(Value);
    }
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ExportWord },
        new ToolbarItemModel() { Command = ToolbarCommand.ExportPdf },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.SuperScript },
        new ToolbarItemModel() { Command = ToolbarCommand.SubScript },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        //new ToolbarItemModel() { Command = ToolbarCommand.LowerCase },
        //new ToolbarItemModel() { Command = ToolbarCommand.UpperCase },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        //new ToolbarItemModel() { Command = ToolbarCommand.Blockquote },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.NumberFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.BulletFormatList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        //new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        //new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.Video },
        new ToolbarItemModel() { Command = ToolbarCommand.Audio },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.FullScreen },
    };
    private List<TableToolbarItemModel> TableQuickToolbarItems = new List<TableToolbarItemModel>()
    {
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableHeader },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableRows },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableColumns },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableCell },
        new TableToolbarItemModel() { Command = TableToolbarCommand.HorizontalSeparator },
        new TableToolbarItemModel() { Command = TableToolbarCommand.BackgroundColor },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableRemove },
        new TableToolbarItemModel() { Command = TableToolbarCommand.TableCellVerticalAlign },
        new TableToolbarItemModel() { Command = TableToolbarCommand.Styles }
    };
}