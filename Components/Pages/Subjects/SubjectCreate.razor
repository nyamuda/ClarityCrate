@using Clarity_Crate.Services
@using Clarity_Crate.Dtos
@inject NavigationManager NavigationManager
@inject SubjectService SubjectService
@inject CurriculumService CurriculumService

@using Clarity_Crate.Models
@page "/add-subject"


<div class="container text-start m-auto">
    <h2>Add a new subject</h2>

    <EditForm Model="@SubjectCreateDto" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />


        <div class="mb-3">

            <MudTextField @bind-Value="SubjectCreateDto.Name"
                          For="@(() => SubjectCreateDto.Name)"
                          Immediate="true"
                          Label="Name" />

            

            <MudSelect Required T="Curriculum" Label="Subject" ToStringFunc="@converter" MultiSelection="true" @bind-SelectedValues="SubjectCreateDto.SelectedCurriculums">
                @foreach (var curriculum in Curriculums)
                {
                    <MudSelectItem T="Curriculum" Value="@curriculum">@curriculum.Name</MudSelectItem>
                }
            </MudSelect>



        </div>


        <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" ButtonType="ButtonType.Submit">
            Create
        </MudButton>
    </EditForm>

</div>
@code {
    private SubjectCreateDto SubjectCreateDto { get; set; } = new SubjectCreateDto();
    private List<Curriculum> Curriculums { get; set; } = new List<Curriculum>();
    


    private async Task HandleValidSubmit()
    {
       

        Subject subject = new Subject
            {
                Name = SubjectCreateDto.Name,
                Curriculums=SubjectCreateDto.SelectedCurriculums.ToList()

            };


        await SubjectService.CreateSubject(subject);


        //redirect to the subjects page
        NavigationManager.NavigateTo("/subjects");

    }
    protected override async Task OnInitializedAsync()
    {
        //get all the curriculums
        await CurriculumService.GetCurricula();
        Curriculums = CurriculumService.Curriculums;
    }



    Func<Curriculum, string> converter = c => c?.Name;

   
}