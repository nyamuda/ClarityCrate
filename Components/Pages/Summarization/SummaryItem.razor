@using Clarity_Crate.Services
@using Clarity_Crate.Components.Pages.TextEditor
@inject FileService FileService
@inject SummarizationService SummarizationService
@inject IJSRuntime JSRuntime
@inject AppService AppService
@using System.Text;



<div class="summarization-mode">
    <!--Desktop View-->
    <div class="d-none d-md-flex row">
        <div class="col-12 d-flex flex-column justify-content-between">

            <div class="summarization-text-submit">
                <div class="d-none d-md-block">
                    <MudTextField T="string" Immediate="true" Label="Enter your text" Variant="Variant.Text" @bind-Value="SummarizationService.Text" TextChanged="OnTextChanged" Lines="@(Mode.Equals("custom")?10:14)" Clearable="true" DisableUnderLine />
                </div>

                <!--If summarization mode is custom-->
                @if (Mode.Equals("custom"))
                {
                    <MudTextField T="string" Immediate="true" Label="Enter your instruction" HelperText="E.g., Summarize the following text in a single sentence" Variant="Variant.Filled" @bind-Value="SummarizationService.CustomPrompt" Clearable="true" />
                }

                <!-- Bottom Buttons -->
                <div class="mt-1 d-flex justify-content-between align-items-baseline">
                    <div class="d-flex justify-conten-start align-items-center">
                        <div class="me-3">


                            <MudFileUpload Context="fileInput" T="IBrowserFile" Accept="@_allSupportedFileExtensions" FilesChanged="UploadFile" MaximumFileCount="100">
                                <ButtonTemplate>
                                    @if (_isProcessingFile)
                                    {
                                        <MudButton class="gray darken-4 cursor-progress" Variant="Variant.Text">
                                            @_fileStatus...
                                        </MudButton>
                                    }
                                    else if (SummarizationService.IsSummarizing)
                                    {
                                        <!--Disable button until summarization is finished-->
                                        <MudTooltip Text="Wait until summarization is finished" Arrow="true">
                                            <MudButton Disabled="true" HtmlTag="label" for="@fileInput" Class="gray darken-4" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Upload">
                                                Upload
                                            </MudButton>
                                        </MudTooltip>

                                    }
                                    else
                                    {

                                        <MudTooltip Text="Upload a document to summarize" Arrow="true">
                                            <MudButton HtmlTag="label" for="@fileInput" Class="gray darken-4" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Upload">
                                                Upload
                                            </MudButton>
                                        </MudTooltip>

                                    }
                                </ButtonTemplate>
                            </MudFileUpload>


                        </div>
                        <div>
                            @if (SummarizationService.IsSummarizing)
                            {
                                <MudButton class="blue-grey darken-4 text-light cursor-progress mt-1" Variant="Variant.Filled">
                                    Summarizing...
                                </MudButton>

                            }
                            else
                            {
                                <!--Only Logged in users can use the custom summarization mode-->
                                if (Mode.Equals("custom"))
                                {
                                    <CascadingAuthenticationState>
                                        <AuthorizeView>
                                            <Authorized>
                                                <MudButton OnClick="SummarizeText" Disabled="@string.IsNullOrEmpty(SummarizationService.Text)" Class="blue-grey darken-4 text-light mt-1" Variant="Variant.Filled">
                                                    Summarize
                                                </MudButton>
                                            </Authorized>
                                            <NotAuthorized>
                                                <MudButton Href="Account/Login" Class="" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Lock">Login to use custom mode</MudButton>
                                            </NotAuthorized>
                                        </AuthorizeView>
                                    </CascadingAuthenticationState>

                                }
                                else
                                {
                                    <MudButton OnClick="SummarizeText" Disabled="@string.IsNullOrEmpty(SummarizationService.Text)" Class="blue-grey darken-4 text-light mt-1" Variant="Variant.Filled">
                                        Summarize
                                    </MudButton>
                                }
                            }
                        </div>
                    </div>
                    <MudText>@numOfWords words</MudText>
                </div>
            </div>
        </div>
    </div>

    <!--Mobile View-->
    <div class="d-block d-md-none w-100 mt-3">


        <div class="summarization-text-submit">
            <div class="d-block d-md-none">
                <MudTextField T="string" Immediate="true" Label="Enter your text" Variant="Variant.Text" @bind-Value="SummarizationService.Text" TextChanged="OnTextChanged" Lines="@(Mode.Equals("custom")?12:16)" Clearable="true" DisableUnderLine />
            </div>

            <!--If summarization mode is custom-->
            @if (Mode.Equals("custom"))
            {
                <MudTextField T="string" Immediate="true" Label="Enter your instruction" HelperText="E.g., Summarize the following text in a single sentence" Variant="Variant.Filled" @bind-Value="SummarizationService.CustomPrompt" Clearable="true" />
            }
            <!-- Bottom Buttons -->
            <div class="mt-1 d-flex justify-content-between align-items-center">
                <div>
                    @if (SummarizationService.Text.Length > 0)
                    {
                        <MudText>@numOfWords words</MudText>
                    }
                    else
                    {
                        <MudFileUpload Context="fileInput" T="IBrowserFile" Accept=".pdf" FilesChanged="UploadFile" MaximumFileCount="100">
                            <ButtonTemplate>
                                @if (_isProcessingFile)
                                {
                                    <MudButton class="gray darken-4 cursor-progress" Variant="Variant.Outlined">
                                        @_fileStatus...
                                    </MudButton>
                                }
                                else
                                {
                                    <MudIconButton HtmlTag="label" for="@fileInput" Class="gray darken-4" Icon="@Icons.Material.Filled.Upload" />

                                }
                            </ButtonTemplate>
                        </MudFileUpload>
                    }
                </div>
                <div>
                    @if (SummarizationService.IsSummarizing)
                    {

                        <MudButton class="blue-grey darken-4 text-light cursor-progress mt-1" Variant="Variant.Filled">
                            Summarizing...
                        </MudButton>


                    }
                    else
                    {
                        <!--Only Logged in users can use the custom summarization mode-->
                        if (Mode.Equals("custom"))
                        {
                            <CascadingAuthenticationState>
                                <AuthorizeView>
                                    <Authorized>
                                        <MudButton OnClick="SummarizeText" Disabled="@string.IsNullOrEmpty(SummarizationService.Text)" Class="blue-grey darken-4 text-light mt-1" Variant="Variant.Filled">
                                            Summarize
                                        </MudButton>
                                    </Authorized>
                                    <NotAuthorized>
                                        <MudButton Href="Account/Login" Class="" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Lock">Login</MudButton>
                                    </NotAuthorized>
                                </AuthorizeView>
                            </CascadingAuthenticationState>

                        }
                        else
                        {
                            <MudButton OnClick="SummarizeText" Disabled="@string.IsNullOrEmpty(SummarizationService.Text)" Class="blue-grey darken-4 text-light mt-1" Variant="Variant.Filled">
                                Summarize
                            </MudButton>
                        }

                    }
                </div>
            </div>
        </div>
    </div>

</div>


@code
{


    public string _summary = "Your summary will go here";
    //Transfer the summary, and file name to the parent component
    //by passing a tuple
    [Parameter]
    public EventCallback<(string Summary, string FileName, int SummaryWords)> TransferSummary { get; set; }

    private int numOfWords = 0;
    private int summaryNumOfWords = 0;
    //file size
    private long fileSize = 0;
    private string fileName = "";
    [Parameter]
    public string Mode { get; set; } = "paragraph";
    IBrowserFile file;
    private bool _isProcessingFile = false;

    private string _fileStatus = "Processing";
    // All supported file extensions
    private string _allSupportedFileExtensions = ".pdf, .xlsx, .xls, .pptx, .ppt, .doc, .docx, .xml, .dot, .dotx, .docm, .dotm, .rtf, .txt, .md, .html, .jpeg, .jpg, .png, .bmp, .gif, .tiff, .tif, .emf, .ico, .icon";
    // Supported Word file extensions
    private string[] _supportedWordExtensions = new[]
    {
    ".doc", ".docx", ".xml", ".dot", ".dotx", ".docm", ".dotm",
    ".rtf", ".txt", ".md", ".html"
    };
    // Supported image file extensions
    private readonly string[] _supportedImageExtensions =
        { ".jpeg", ".jpg", ".png", ".bmp", ".gif", ".tiff", ".tif", ".emf", ".ico", ".icon" };

    //MudBlazor Dialog
    [Inject] private IDialogService DialogService { get; set; }
    private readonly DialogOptions dialogOptions = new DialogOptions() { CloseButton = true };





    protected override async Task OnInitializedAsync()
    {
        //show the summary if its there
        /*
        var summaryText = SummarizationService.Summary;
        if (!string.IsNullOrEmpty(summaryText))
            {

            ShowSummary(summaryText);
        }
        */

    }


    private async Task UploadFile(IBrowserFile uploadedFile)
    {

        file = uploadedFile;
        _isProcessingFile = true;


        try
        {
            // Create a memory stream and read the file asynchronously
            using (var memoryStream = new MemoryStream())
            {

                //get file size
                fileSize = file.Size;
                // Get file name and without the extension
                fileName = Path.GetFileNameWithoutExtension(file.Name);

                string fileExtension = Path.GetExtension(file.Name)?.ToLower();


                //max file size for pdf is 20MB and 1.5MB for other files
                //if size exceeds 1.5MB, show error message
                if (fileSize > 1 * 1024 * 1024 && fileExtension != ".pdf")
                {
                    //maximun file size for non-pdf files is 1MB
                    var message = "Maximum file size for non-PDF files is 1MB";
                    throw new NotSupportedException(message);
                }
                //if file is pdf, and size exceeds 5MB, show error message
                if (fileExtension == ".pdf" && fileSize > 5 * 1024 * 1024)
                {
                    var message = "Maximum file size for PDF files is 5MB";
                    throw new NotSupportedException(message);
                }

                await file.OpenReadStream(maxAllowedSize: long.MaxValue).CopyToAsync(memoryStream);
                memoryStream.Position = 0; // Reset position to the beginning



                if (fileExtension == ".pdf")
                {

                    // Extract text directly from the PDF
                    var extractedText = FileService.ExtractTextFromPdf(memoryStream);

                    // If text is not extracted, fallback to OCR
                    if (string.IsNullOrWhiteSpace(extractedText))
                    {

                        //perform OCR on the PDF
                        //but first check file size
                        if (fileSize > 1 * 1024 * 1024)
                        {
                            //maximum file size for non-pdf files is 1MB
                            var message = "Maximum supported file size for scanned PDF files is 1MB";
                            throw new NotSupportedException(message);
                        }

                        await PerformOcr(memoryStream);

                    }

                    else
                    {
                        SummarizationService.Text = extractedText;
                    }
                }
                //Excel file
                else if (fileExtension == ".xlsx" || fileExtension == ".xls")
                {


                    // Convert Excel to PDF and then extract text
                    using (var pdfStream = FileService.ConvertExcelToPdf(memoryStream))
                    {

                        SummarizationService.Text = FileService.ExtractTextFromPdf(pdfStream);
                    }
                }
                //PowerPoint file
                else if (fileExtension == ".pptx" || fileExtension == ".ppt")
                {

                    // Convert Excel to PDF and then extract text
                    using (var pdfStream = FileService.ConvertPowerPointToPdf(memoryStream))
                    {


                        SummarizationService.Text = FileService.ExtractTextFromPdf(pdfStream);
                    }
                }
                //Word extensions
                else if (_supportedWordExtensions.Contains(fileExtension))
                {

                    // Convert Word to PDF and then extract text
                    using (var pdfStream = FileService.ConvertWordToPdf(memoryStream))
                    {

                        SummarizationService.Text = FileService.ExtractTextFromPdf(pdfStream);
                    }
                }
                //Image extensions
                else if (_supportedImageExtensions.Contains(fileExtension))
                {

                    // Convert image to PDF and then extract text
                    using (var pdfStream = FileService.ConvertImageToPdf(memoryStream))
                    {

                        //perform OCR on the image
                        await PerformOcr(pdfStream);
                    }
                }


                else
                {
                    throw new NotSupportedException("File type is not supported.");
                }

                _isProcessingFile = false;

                // Increment the number of documents summarized
                await FileService.IncrementDocumentCount();
            }
        }
        catch (Exception ex)
        {
            _isProcessingFile = false;
            Console.WriteLine($"Error: {ex.Message}");
            AppService.ShowSnackBar(message: ex.Message, severity: "error");
        }
    }


    private int WordCount(string text)
    {
        return string.IsNullOrWhiteSpace(text) ? 0 : text.Split(' ', StringSplitOptions.RemoveEmptyEntries).Length;
    }

    //Count the number of words of the text to be summarized
    private void OnTextChanged(string newText)
    {
        SummarizationService.Text = newText;
        numOfWords = WordCount(SummarizationService.Text);
    }

    //Count the number of words of the summary
    private void OnSummaryChanged(string newText)
    {
        _summary = newText;
        summaryNumOfWords = WordCount(_summary);
    }


    private async Task SummarizeText()
    {
        //set the prompt for summarization depending on the mode
        SetSummarizationPrompt();

        string textToSummarize = SummarizationService.Text;

        //maximum summary length is 75% of the original words
        int maximumNumWords = (int)(numOfWords * 0.75);
        //minimum number of words is >=25% of the original words
        int minimumNumWords = (int)(numOfWords * SummarizationService.SummaryPercentage / 100);


        //convert minimum and maximum number of words into tokens
        var (maxTokens, minTokens) = CalculateTokens(maximumNumWords, minimumNumWords);


        await SummarizationService.SummarizeAsync(textToSummarize);

        var summaryText = SummarizationService.Summary;

        //show the summary
        ShowSummary(summaryText);


    }

    //Calculate tokens from words
    private (int maxTokens, int minTokens) CalculateTokens(int maxWords, int minWords)
    {
        //1 word ≈ 1.33 tokens

        int estimatedMaxTokens = (int)(maxWords * 1.33);
        int estimatedMinTokens = (int)(minWords * 1.33);

        //maximum number of token cannot exceed 1024
        int maximumTokens = estimatedMaxTokens > 1024 ? 1024 : estimatedMaxTokens;
        //minimum number of token cannot exceed 1024
        int minimumTokens = estimatedMinTokens > 1024 ? 512 : estimatedMinTokens;




        return (maximumTokens, minimumTokens);
    }

    //Download summary as PDF
    private async Task DownloadPdf()
    {
        // Generate the PDF
        var pdfBytes = FileService.GeneratePdf(_summary);

        // Use JS Interop to trigger a download
        await TriggerDownload(pdfBytes, "Article.pdf");
    }

    private async Task TriggerDownload(byte[] fileBytes, string fileName)
    {
        var base64Data = Convert.ToBase64String(fileBytes);
        var fileUrl = $"data:application/pdf;base64,{base64Data}";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
    }


    //Copy Summary
    private async Task CopySummary()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("copyToClipboard", _summary);
            AppService.ShowSnackBar(message: "Text copied to clipboard!", severity: "normal");
        }
        catch (Exception ex)
        {

            AppService.ShowSnackBar(message: "Failed to copy text", severity: "error");

        }
    }


    //set the prompt for summarization
    private void SetSummarizationPrompt()
    {
        if (Mode.Equals("custom"))
        {
            //string at the beginning of every custom prompt
            string promptPrepend = "Summarize the following content, ";
            //remove spaces from user entered prompt
            string userPrompt = SummarizationService.CustomPrompt.Trim().ToLower();
            //the full custom prompt
            string customPrompt = promptPrepend + userPrompt;

            SummarizationService.Prompt = customPrompt;
        }

        else if (Mode.Equals("bullet"))
        {
            SummarizationService.Prompt = SummarizationService.BulletPointsPrompt;
        }

        //default summarization mode is paragraph
        else
        {
            SummarizationService.Prompt = SummarizationService.ParagraphPrompt;
        }


    }
    //Show the summary in paragraph form or bullet point form
    private void ShowSummary(string text)
    {

        // If the summarize mode is bullet points, format the text
        if (Mode == "bullet")
        {

            // Split the text into sentences based on common sentence-ending punctuation.
            var sentences = text.Split(new[] { ". ", "! ", "? " }, StringSplitOptions.RemoveEmptyEntries);

            // Build the HTML list.
            var stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("<ul>");

            foreach (var sentence in sentences)
            {
                // Ensure the sentence ends with the proper punctuation if trimmed.
                string trimmedSentence = sentence.Trim();
                if (!string.IsNullOrEmpty(trimmedSentence))
                {
                    stringBuilder.AppendLine($"  <li>{trimmedSentence}.</li>");
                }
            }

            stringBuilder.AppendLine("</ul>");

            _summary = stringBuilder.ToString();

        }
        else
        {
            _summary = text; // Use plain text for other modes
        }

        // Transfer the summary to the parent component
        if (TransferSummary.HasDelegate)
        {
            var summaryNumOfWords = WordCount(_summary);
            TransferSummary.InvokeAsync((_summary, fileName, summaryNumOfWords));
        }

        //scroll to the summary
        JSRuntime.InvokeVoidAsync("scrollToElement", "summaryContainer");
        JSRuntime.InvokeVoidAsync("scrollToElement", "summaryMobileContainer");

    }


    //Perform OCR on the image or PDF
    private async Task PerformOcr(Stream fileStream)
    {
        //first ask the user if they want to perform OCR
        var title = "Perform OCR?";
        var message = "The file you uploaded is an image or scanned document. Do you want to perform OCR to extract text from the file? This process may take a while.";
        var confirmText = "Continue";
        var cancelText = "Cancel";
        bool? result = await DialogService.ShowMessageBox(
          title,
          message,
          yesText: confirmText, cancelText: cancelText, options:dialogOptions);

        var state = result == null ? cancelText : confirmText;

        //close the dialog
       
        //if result is not null, then its confirmed
        if (state.Equals(confirmText))
        {
            //delay for 2 seconds
            //to allow the dialog to close
            await Task.Delay(2000);
           //Perform OCR
            var text = await FileService.PerformOcrOnPdf(fileStream);

            //if OCR is successful, set the text
            if (!string.IsNullOrEmpty(text))
            {
                SummarizationService.Text = text;
                //show snack bar
               var displayMessage = "OCR completed successfully.";
                AppService.ShowSnackBar(message: displayMessage, severity: "normal");
            }
            else
            {
                //show snack bar
                var displayMessage = "OCR failed to extract text from the image or scanned document.";
                AppService.ShowSnackBar(message: displayMessage, severity: "error");
            }

        }


    }


}