@using Clarity_Crate.Services
@inject FileService FileService
@inject SummarizationService SummarizationService


<div class="summarization-mode">
    <!--Desktop View-->
    <div class="d-none d-md-flex row">
        <div class="col d-flex flex-column justify-content-between">
            @if(ShowSlider)
            {
                <p>Summary Length</p>
                <div class="d-flex justify-content-between align-items-center text-lowercase">
                    <span>Short</span>
                    <MudSlider Class="mx-2" Variant="Variant.Filled" Size="Size.Small" Min="50" Max="400" Value="150" />
                    <span>Long</span>
                </div>
            }
            <div class="summarization-text-submit">
                <div class="d-none d-md-block">
                    <MudTextField T="string" Immediate="true" Label="Enter your text" Variant="Variant.Text" @bind-Value="SummarizationService.Text" TextChanged="OnTextChanged" Lines="@(ShowSlider? 12 :15)" Clearable="true"/>
                </div>

                <!-- Bottom Buttons -->
                <div class="mt-1 d-flex justify-content-between align-items-center">
                    <div>
                        @if (SummarizationService.Text.Length > 0)
                        {
                            <MudText>@numOfWords words</MudText>
                        }
                        else
                        {
                            <MudFileUpload Context="fileInput" T="IBrowserFile" Accept=".pdf" FilesChanged="UploadFile" MaximumFileCount="100">
                                <ButtonTemplate>
                                    @if (_isExtractingText)
                                    {
                                        <MudButton class="gray darken-4 cursor-progress" Variant="Variant.Outlined">
                                            Extracting...
                                        </MudButton>
                                    }
                                    else
                                    {
                                        <MudButton HtmlTag="label" for="@fileInput" Class="gray darken-4" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Upload">
                                            Upload
                                        </MudButton>
                                    }
                                </ButtonTemplate>
                            </MudFileUpload>
                        }
                    </div>
                    <div>
                        @if (SummarizationService.IsSummarizing)
                        {
                            <MudButton class="grey darken-4 cursor-progress text-light" Variant="Variant.Filled">
                                Summarizing
                            </MudButton>

                        }
                        else
                        {
                            <MudButton OnClick="SummarizeText" Disabled="@string.IsNullOrEmpty(SummarizationService.Text)" Class="grey darken-4 text-light mt-1" Variant="Variant.Filled">
                                Summarize
                            </MudButton>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!--Summary Block-->
        <div class="col border-start">
            <p>@_summary</p>
        </div>
    </div>

    <!--Mobile View-->
    <div class="d-block d-md-none w-100">
        <MudTabs Centered="true" Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Original">
                @if(ShowSlider)
                {
                    <p>Summary Length</p>
                    <div class="d-flex justify-content-between align-items-center text-lowercase">
                        <span>Short</span>
                        <MudSlider Class="mx-2" Variant="Variant.Filled" Size="Size.Small" Min="50" Max="400" Value="150" />
                        <span>Long</span>
                    </div>
                }
                <div class="summarization-text-submit">
                    <div class="d-block d-md-none">
                        <MudTextField T="string" Immediate="true" Label="Enter your text" Variant="Variant.Text" @bind-Value="SummarizationService.Text" TextChanged="OnTextChanged" Lines="@(ShowSlider?8:11)" Clearable="true" />
                    </div>

                    <!-- Slider & Bottom Buttons -->
                    <!-- Bottom Buttons -->
                    <div class="mt-1 d-flex justify-content-between align-items-center">
                        <div>
                            @if (SummarizationService.Text.Length > 0)
                            {
                                <MudText>@numOfWords words</MudText>
                            }
                            else
                            {
                                <MudFileUpload Context="fileInput" T="IBrowserFile" Accept=".pdf" FilesChanged="UploadFile" MaximumFileCount="100">
                                    <ButtonTemplate>
                                        @if (_isExtractingText)
                                        {
                                            <MudButton class="gray darken-4 cursor-progress" Variant="Variant.Outlined">
                                                Extracting...
                                            </MudButton>
                                        }
                                        else
                                        {
                                            <MudButton HtmlTag="label" for="@fileInput" Class="gray darken-4" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Upload">
                                                Upload
                                            </MudButton>
                                        }
                                    </ButtonTemplate>
                                </MudFileUpload>
                            }
                        </div>
                        <div>
                            @if(SummarizationService.IsSummarizing)
                            {
                                <MudButton class="grey darken-4 cursor-progress text-light" Variant="Variant.Filled">
                                    Summarizing
                                </MudButton>

                            }
                            else
                            {
                                <MudButton OnClick="SummarizeText" Disabled="@string.IsNullOrEmpty(SummarizationService.Text)" Class="grey darken-4 text-light mt-1" Variant="Variant.Filled">
                                    Summarize
                                </MudButton>
                            }
                        </div>
                    </div>
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Summarized">
                <MudText>@_summary</MudText>
            </MudTabPanel>

        </MudTabs>

    </div>

</div>



@code
{
    int value = 100;
    string[] labels = new string[] { "Short", "Medium", "Long" };

    public string _summary = string.Empty;
    [Parameter]
    public bool ShowSlider { get; set; } = false;

    private int numOfWords = 0;
    [Parameter]
    public string Mode { get; set; } = "paragraph";
    IBrowserFile file;
    private bool _isExtractingText = false;


    protected override async Task OnInitializedAsync()
    {
        if(Mode.Equals("paragraph"))
        {
            _summary = "Its paragraph mode";
        }  

        if (Mode.Equals("bullet"))
        {
            _summary = "Its bullet mode";
        }

    }


    private async Task UploadFile(IBrowserFile uploadedFile)
    {
        file = uploadedFile;
        _isExtractingText = true;

        try
        {
            // Create a memory stream and read the file asynchronously
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream(maxAllowedSize: long.MaxValue).CopyToAsync(memoryStream);
                memoryStream.Position = 0; // Reset position to the beginning

                // Extract text from PDF using the memory stream
                SummarizationService.Text = FileService.ExtractTextFromPdf(memoryStream);
                _isExtractingText = false;

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private int WordCount(string text)
    {
        return string.IsNullOrWhiteSpace(text) ? 0 : text.Split(' ', StringSplitOptions.RemoveEmptyEntries).Length;
    }

    private void OnTextChanged(string newText)
    {
        SummarizationService.Text = newText;
        numOfWords = WordCount(SummarizationService.Text);
    }


    private async Task SummarizeText()
    {
        string textToSummarize = SummarizationService.Text;
        int maxLength=value;
        int minLength = 50;

        await SummarizationService.GetParagraphSummary(textToSummarize, maxLength, minLength);

        _summary = SummarizationService.Summary;

    }




   

}