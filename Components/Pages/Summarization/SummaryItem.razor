@using Clarity_Crate.Services
@inject FileService FileService
@inject SummarizationService SummarizationService
@inject IJSRuntime JSRuntime
@inject AppService AppService


<div class="summarization-mode">
    <!--Desktop View-->
    <div class="d-none d-md-flex row">
        <div class="col d-flex flex-column justify-content-between">
           
            <div class="summarization-text-submit">
                <div class="d-none d-md-block">
                    <MudTextField T="string" Immediate="true" Label="Enter your text" Variant="Variant.Text" @bind-Value="SummarizationService.Text" TextChanged="OnTextChanged" Lines="13" Clearable="true" DisableUnderLine />
                </div>

                <!--If summarization mode is custom-->
                @if(Mode.Equals("custom")) {

                }

                <!-- Bottom Buttons -->
                <div class="mt-1 d-flex justify-content-between align-items-center">
                    <div>
                        @if (SummarizationService.Text.Length > 0)
                        {
                            <MudText>@numOfWords words</MudText>
                        }
                        else
                        {
                            <MudFileUpload Context="fileInput" T="IBrowserFile" Accept=".pdf" FilesChanged="UploadFile" MaximumFileCount="100">
                                <ButtonTemplate>
                                    @if (_isExtractingText)
                                    {
                                        <MudButton class="gray darken-4 cursor-progress" Variant="Variant.Outlined">
                                            Extracting...
                                        </MudButton>
                                    }
                                    else
                                    {
                                        <MudTooltip Text = "Upload a document to summarize" Arrow = "true" >
                                        <MudButton HtmlTag="label" for="@fileInput" Class="gray darken-4" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Upload">
                                            Upload
                                        </MudButton>
                                        </MudTooltip>

                                    }
                                </ButtonTemplate>
                            </MudFileUpload>
                        }
                        
                    </div>
                    <div>
                        @if (SummarizationService.IsSummarizing)
                        {
                            <MudButton class="blue-grey darken-4 text-light cursor-progress mt-1" Variant="Variant.Filled">
                                Summarizing...
                            </MudButton>

                        }
                        else
                        {
                            <MudButton OnClick="SummarizeText" Disabled="@string.IsNullOrEmpty(SummarizationService.Text)" Class="blue-grey darken-4 text-light mt-1" Variant="Variant.Filled">
                                Summarize
                            </MudButton>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!--Summary Block-->
        <div class="col border-start">
            <MudTextField T="string" Immediate="true" Label="" Variant="Variant.Text" @bind-Value="_summary" TextChanged="OnSummaryChanged" Lines="13" DisableUnderLine />
            <div class="mt-1 d-flex justify-content-between align-items-center">
                <MudText>@summaryNumOfWords words</MudText>
                @if (_summary.Length > 0)
                {
                   <div>
                        <MudTooltip Text="Export summary as a file" Arrow="true">
                        <MudIconButton OnClick="DownloadPdf" Icon="@Icons.Material.Filled.Download" aria-label="Download text" />
                        </MudTooltip>
                        <MudTooltip Text="Copy summarized text" Arrow="true">
                        <MudIconButton OnClick="CopySummary" Icon="@Icons.Material.Filled.ContentCopy" aria-label="Copy text " />
                        </MudTooltip>
                   </div>
                }

            </div>
        </div>
    </div>

    <!--Mobile View-->
    <div class="d-block d-md-none w-100">
        <MudTabs Centered="true" Elevation="0" Rounded="true" @ref="tabs" ApplyEffectsToContainer="true" PanelClass="pa-6" HideSlider="true">
            <MudTabPanel Text="Original">
               
                <div class="summarization-text-submit">
                    <div class="d-block d-md-none">
                        <MudTextField T="string" Immediate="true" Label="Enter your text" Variant="Variant.Text" @bind-Value="SummarizationService.Text" TextChanged="OnTextChanged" Lines="18" Clearable="true" />
                    </div>

                    <!-- Slider & Bottom Buttons -->
                    <!-- Bottom Buttons -->
                    <div class="mt-1 d-flex justify-content-between align-items-center">
                        <div>
                            @if (SummarizationService.Text.Length > 0)
                            {
                                <MudText>@numOfWords words</MudText>
                            }
                            else
                            {
                                <MudFileUpload Context="fileInput" T="IBrowserFile" Accept=".pdf" FilesChanged="UploadFile" MaximumFileCount="100">
                                    <ButtonTemplate>
                                        @if (_isExtractingText)
                                        {
                                            <MudButton class="gray darken-4 cursor-progress" Variant="Variant.Outlined">
                                                Extracting...
                                            </MudButton>
                                        }
                                        else
                                        {
                                            <MudButton HtmlTag="label" for="@fileInput" Class="gray darken-4" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Upload">
                                                Upload
                                            </MudButton>
                                        }
                                    </ButtonTemplate>
                                </MudFileUpload>
                            }
                        </div>
                        <div>
                            @if(SummarizationService.IsSummarizing)
                            {

                                <MudButton class="blue-grey darken-4 text-light cursor-progress mt-1" Variant="Variant.Filled">
                                    Summarizing...
                                </MudButton>
                                

                            }
                            else
                            {
                                <MudButton OnClick="SummarizeText" Disabled="@string.IsNullOrEmpty(SummarizationService.Text)" Class="blue-grey darken-4 text-light mt-1" Variant="Variant.Filled">
                                    Summarize
                                </MudButton>
                            }
                        </div>
                    </div>
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Summarized">
                <MudTextField T="string" Immediate="true" Label="" Variant="Variant.Text" @bind-Value="_summary" TextChanged="OnSummaryChanged" Lines="18" DisableUnderLine />
                <div class="mt-1 d-flex justify-content-between align-items-center">
                    <MudText>@summaryNumOfWords words</MudText>
                    @if (_summary.Length > 0)
                    {
                        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Download">Export</MudButton>
                    }

                </div>

            </MudTabPanel>

        </MudTabs>

    </div>

</div>


@code
{
    [Parameter]
    public int SummaryPercentage { get; set; } 

    public string _summary = string.Empty;

    private int numOfWords = 0;
    private int summaryNumOfWords = 0;
    [Parameter]
    public string Mode { get; set; } = "paragraph";
    IBrowserFile file;
    private bool _isExtractingText = false;
    MudTabs tabs;




    protected override async Task OnInitializedAsync()
    {
        if(Mode.Equals("paragraph"))
        {
            _summary = "Its paragraph mode";
        }  

        if (Mode.Equals("bullet"))
        {
            _summary = "Its bullet mode";
        }

    }


    private async Task UploadFile(IBrowserFile uploadedFile)
    {
        file = uploadedFile;
        _isExtractingText = true;

        try
        {
            // Create a memory stream and read the file asynchronously
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream(maxAllowedSize: long.MaxValue).CopyToAsync(memoryStream);
                memoryStream.Position = 0; // Reset position to the beginning

                // Extract text from PDF using the memory stream
                SummarizationService.Text = FileService.ExtractTextFromPdf(memoryStream);
                _isExtractingText = false;

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private int WordCount(string text)
    {
        return string.IsNullOrWhiteSpace(text) ? 0 : text.Split(' ', StringSplitOptions.RemoveEmptyEntries).Length;
    }

    //Count the number of words of the text to be summarized
    private void OnTextChanged(string newText)
    {
        SummarizationService.Text = newText;
        numOfWords = WordCount(SummarizationService.Text);
    }

    //Count the number of words of the summary
    private void OnSummaryChanged(string newText)
    {
        _summary = newText;
        summaryNumOfWords = WordCount(_summary);
    }


    private async Task SummarizeText()
    {
        string textToSummarize = SummarizationService.Text;

        //maximum summary length is 75% of the original words
        int maximumNumWords = (int)(numOfWords * 0.75);
        //minimum number of words is >=25% of the original words
        int minimumNumWords = (int)(numOfWords * SummaryPercentage/100);


        //convert minimum and maximum number of words into tokens
        var (maxTokens, minTokens) = CalculateTokens(maximumNumWords, minimumNumWords);


        await SummarizationService.GetParagraphSummary(textToSummarize, maxTokens, minTokens);

        _summary = SummarizationService.Summary;

        //activate the summary tab on mobile devices
        ActivateTab(1);

    }

    //Calculate tokens from words
    private (int maxTokens, int minTokens) CalculateTokens(int maxWords, int minWords)
    {
        //1 word ≈ 1.33 tokens
        int maximumTokens = (int)(maxWords * 1.33);
        int minimumTokens = (int)(minWords * 1.33);

        return (maximumTokens, minimumTokens);
    }

    //Download summary as PDF
    private async Task DownloadPdf()
    {
        // Generate the PDF
        var pdfBytes = FileService.GeneratePdf(_summary);

        // Use JS Interop to trigger a download
        await TriggerDownload(pdfBytes, "Article.pdf");
    }

    private async Task TriggerDownload(byte[] fileBytes, string fileName)
    {
        var base64Data = Convert.ToBase64String(fileBytes);
        var fileUrl = $"data:application/pdf;base64,{base64Data}";
        await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
    }


    //Copy Summary
    private async Task CopySummary()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("copyToClipboard", _summary);
            AppService.ShowSnackBar(message: "Text copied to clipboard!", isSuccess: true);
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error {ex}");
            AppService.ShowSnackBar(message: "Failed to copy text", isSuccess: false);
        }
    }

    //Activate a tab
    void ActivateTab(int index)
    {
        tabs.ActivatePanel(index);
    }


}