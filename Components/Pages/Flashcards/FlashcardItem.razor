@using Clarity_Crate.Models
@using Clarity_Crate.Services
@inject DefinitionService DefinitionService
<style>
    .flashcard {
        width: 100%;
        height: 12.5rem;
        perspective: 62.5rem;
        cursor: pointer;
        margin: 1.25rem;
    }

    .flashcard-inner {
        position: relative;
        width: 100%;
        height: 100%;
        transition: transform 0.6s;
        transform-style: preserve-3d;
    }

        .flashcard-inner.flipped {
            transform: rotateY(180deg);
        }

    .flashcard-content {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
    }

    .flashcard-back {
        transform: rotateY(180deg);
        backface-visibility: hidden;
        overflow: auto;
        /* Allow scrolling if the text is too long */
    }
</style>

<MudPaper Class="flashcard" Elevation="0" @onclick="ToggleFlip">
    <div class="shadow flashcard-inner @(isFlipped ? "flipped" : "")">
        <div class="flashcard-front flex-column flashcard-content d-flex justify-content-center align-items-center p-2">
            <MudText Typo="Typo.h4">@Definition.Term.Name</MudText>
            <div class="d-flex justify-content-between px-5">
                <div class="d-flex align-items-center justify-content-center">
                    <MudToggleIconButton ToggledChanged="ToggleFavorite" Toggled="hasFavorited"
                                         Icon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Dark"
                                         ToggledIcon="@Icons.Material.Filled.Favorite" ToggledColor="@Color.Error"
                                         title="@(hasFavorited ? "Favorite" : "Add to favorites")" /> 
                </div>
                <div class="d-flex align-items-center justify-content-center">
                    <MudToggleIconButton ToggledChanged="ToggleLike" Toggled="hasLiked"
                                         Icon="@Icons.Material.Outlined.ThumbUp" Color="Color.Dark"
                                         ToggledIcon="@Icons.Material.Filled.ThumbUp" ToggledColor="@Color.Primary"
                                         title="@(hasLiked ? "Liked" : "Like")" /> <span>@TotalLikes</span>
                </div>
            </div>
        </div>
        <div class="flashcard-back flashcard-content d-flex flex-column justify-content-between text-start p-4">

            @foreach (var definition in Definition.Term.Definitions)
            {

                <div class="d-flex flex-column justify-content-center align-items-start">
                    <MudText>
                        <MudIcon Icon="@Icons.Material.Filled.School" Title="Curriculum" />
                        @definition?.Curriculum?.Name
                    </MudText>
                    <div class="d-flex justify-content-start">
                        @foreach (var level in definition.Levels)
                        {
                            <MudChip T="string" Class="purple darken-3 text-light">@level.Name</MudChip>
                        }

                    </div>
                </div>

                <div>
                    
                    <MudText>@definition?.Content</MudText>
                </div>




            }

        </div>
    </div>
</MudPaper>


@code {

    private bool isFlipped = false;

    public bool hasLiked { get; set; } = false;
    public bool hasFavorited { get; set; } = false;

    [Parameter]
    public int TotalLikes { get; set; } = 0;



    [Parameter]
    public Definition Definition { get; set; } = new();


    [Parameter]
    public string UserId { get; set; } = "";





    protected async override Task OnInitializedAsync()
    {

        if (UserId is not null)
        {
            //check if user has liked the definition
            hasLiked = DefinitionService.HasUserLiked(userId: UserId, definition: Definition);

            //check if user has favored the definition
            hasFavorited = DefinitionService.HasUserFavorited(userId: UserId, definition: Definition);

        }



    }

    private void ToggleFlip()
    {
        isFlipped = !isFlipped;

    }

    private async Task ToggleLike()
    {
        //change the like button
        hasLiked = !hasLiked;

        //change total likes
        if (hasLiked)
        {
            TotalLikes++;
        }
        else
        {
            TotalLikes--;
        }


        //make changes to the database
        await DefinitionService.ToggleLike(userId: UserId, definitionId: Definition.Id, hasLiked);
    }

    private async Task ToggleFavorite()
    {
        //change the like button
        hasFavorited = !hasFavorited;


        //make changes to the database
        await DefinitionService.ToggleFavorite(userId: UserId, definitionId: Definition.Id, hasFavorited);

       

    }

}
