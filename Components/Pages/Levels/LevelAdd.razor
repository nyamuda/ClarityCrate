@inject LevelService LevelService
@using Clarity_Crate.Services
@inject NavigationManager NavigationManager

@using Clarity_Crate.Models
@page "/add-Level"


<div class="container mt-16 text-start m-auto">
    <h2>Add a new Level</h2>

    <EditForm Model="@Level" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />


        <div class="mb-3">

            <MudTextField @bind-Value="Level.Name"
                          For="@(() => Level.Name)"
                          Immediate="true"
                          Label="Name" />


        </div>


        <MudButton Disabled="@LevelService.isAddingItem" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" ButtonType="ButtonType.Submit">
            @if (LevelService.isAddingItem)
            {
                <MudProgressCircular Class="ms-n1 text-light" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Please wait...</MudText>
            }
            else
            {
                <MudText>Create</MudText>
            }
        </MudButton>
    </EditForm>

</div>
@code {
    private Level? Level { get; set; }


    private async Task HandleValidSubmit()
    {
        //add the new Level to the database
        await LevelService.AddLevel(Level);

        //redirect to the Levels page
        NavigationManager.NavigateTo("/Levels");

    }
    protected override async Task OnInitializedAsync()
    {
        Level = new Level();
    }
}