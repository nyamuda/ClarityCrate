@using Clarity_Crate.Services
@using Clarity_Crate.Models
@inject TopicService TopicService
@inject SubjectService SubjectService

@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager




<div class="m-auto mt-5">
    @if (TopicService.isGettingItems)
    {
        <MudProgressLinear Size="Size.Large" Color="Color.Primary" Indeterminate="true" Class="my-7 mt-12" />

    }
    else
    {
        @if (Topics.Count == 0)
        {
            <div class="alert alert-info mt-4" role="alert">
                <p class="mb-1">No topics found.</p>
            </div>
        }
        else
        {
            <!--MudBlazor table that show a list of items -->

            <MudTable Items="Topics" Hover="true" Filter="new Func<Topic,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" CanCancelEdit="true"
                      OnCommitEditClick="@(() =>OnRowEditSave())" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
                      RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="@editTrigger">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Topics and their subjects</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<Topic, object>(x=>x.Name)">Topic</MudTableSortLabel></MudTh>
                    <MudTh>Subject</MudTh>

                    <MudTh>Delete</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Topict">@context.Name</MudTd>
                    <MudTd DataLabel="Subject">
                        @foreach (var subject in context.Subjects)
                        {
                            <MudChip Variant="Variant.Filled" Color="Color.Primary" Class="m-1">@subject.Name</MudChip>
                        }
                    </MudTd>

                    <MudTd DataLabel="Delete">
                        <MudButton Class="ms-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => Delete(context.Id))">Delete</MudButton>
                    </MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Topic"><MudTextField @bind-Value="@context.Name" Required /></MudTd>
                    <MudTd DataLabel="Subject">
                        <!-- The attribute bind-SelectedValues requires an IEnumerable value-->
                        <MudSelect Required T="Subject" Label="Subject" ToStringFunc="@subjectConverter" MultiSelection="true" @bind-SelectedValues="@context.Subjects">
                            @foreach (var subject in Subjects)
                            {
                                <MudSelectItem T="Subject" Value="@subject">@subject.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>


                </RowEditingTemplate>

                <PagerContent>
                    <MudTablePager />
                </PagerContent>

            </MudTable>

        }
    }


</div>







<!--update curriculum dialog-->
@code {
    private List<Topic> Topics = new List<Topic>();
    private List<Subject> Subjects= new List<Subject>();


    [Inject] private IDialogService DialogService { get; set; }

    //Table variables
    private bool blockSwitch = false;
    private Topic selectedItem1 = null;
    private string searchString1 = "";
    private Topic elementBeforeEdit;
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;




    //get all the topics component is initialized

    protected override async Task OnInitializedAsync()
    {
        await TopicService.GetTopics();
        await SubjectService.GetSubjects();
        Topics = TopicService.Topics;
        Subjects= SubjectService.Subjects;


    }


    //delete method
    private async Task Delete(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
          "Delete?",
          "Are you certain you wish to delete this topic?",
          yesText: "Delete", cancelText: "Cancel");

        var state = result == null ? "Cancel" : "Delete";

        //if result is not null, then its confirmed
        if (state.Equals("Delete"))
        {
            bool isSuccess=  await TopicService.DeleteTopic(id);
            if(isSuccess)
            {

                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
                Snackbar.Add("Topic deleted successfully!", Severity.Success);

                await TopicService.GetTopics();
                Topics = TopicService.Topics;


                StateHasChanged();
            }
            else
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
                Snackbar.Add("An error occurred while deleting the topic", Severity.Error);
            }
        }


    }
    


    //Table functions

    private bool FilterFunc(Topic element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private bool FilterFunc1(Topic element) => FilterFunc(element, searchString1);
    private void ResetItemToOriginalValues(object element)
    {
        ((Topic)element).Name = elementBeforeEdit.Name;
        ((Topic)element).Subjects = elementBeforeEdit.Subjects;

    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {

                Name = ((Topic)element).Name,

                Subjects = ((Topic)element).Subjects

            };
    }

    private void ItemHasBeenCommitted(object element)
    {

    }

    private async Task OnRowEditSave()
    {
        await TopicService.UpdateTopic(selectedItem1);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Add("Topic updated successfully!", Severity.Success);
    }


    Func<Subject, string> subjectConverter = l => l?.Name;

}
