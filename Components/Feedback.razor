@using Clarity_Crate.Dtos
@using Clarity_Crate.Services
@inject FeedbackService FeedbackService 
@inject AppService AppService
<style>
    /*Feedback Start*/
    .feedback-section {
        position: fixed;
        left: 0;
        top: 40%;
        transform: translateY(-50%);
        z-index: 1000; /* Ensures it stays on top of other elements */
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .feedback-button-container {
        background-color: #EF6C00;
        position: fixed;
        left: 0;
        top: 50%;
        transform: translateY(0%);
        z-index: 1000; /* Ensures it stays on top of other elements */
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .vertical-text {
        writing-mode: vertical-rl; /* Rotates the text to be vertical */
        transform: rotate(180deg); /* Optional: Adjust the direction */
        white-space: nowrap; /* Ensures the text stays on a single line */
    }


    /*Feedback End */
</style>

<!--Feedback Start-->
<MudPaper Class="feedback-section">
    <MudDrawerContainer Class="">
        <MudDrawer Width="18rem" Style="height:auto;" @bind-Open="@_open" Anchor="Anchor.Start" Elevation="2" Variant="@DrawerVariant.Persistent">
            <MudNavMenu>

                <EditForm class="px-3 pt-5 pb-3" Model="@FeedbackDto" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <MudText Typo="Typo.h6">@Title</MudText>
                    <MudText>Share your thoughts to help us improve.</MudText>
                    <div class="mt-1">

                        <MudTextField T="string" Immediate="true" Label="Enter Feedback" Lines="5" Variant="Variant.Filled" @bind-Value="FeedbackDto.Content" For="@(() =>FeedbackDto.Content)" />

                        <div class="d-flex justify-content-end mt-3">
                            <MudButton Disabled="@FeedbackService.IsAddingFeedback" Variant="Variant.Filled" DisableElevation="true" Color="Color.Dark" ButtonType="ButtonType.Submit">
                                @if (@FeedbackService.IsAddingFeedback)
                                {
                                    <MudProgressCircular Class="ms-n1 text-dark" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2 text-dark">Please wait...</MudText>
                                }
                                else
                                {
                                    <MudText>Send</MudText>
                                }
                            </MudButton>
                        </div>
                    </div>
                </EditForm>
            </MudNavMenu>
        </MudDrawer>


        <div @onclick="ToggleDrawer" class="feedback-button-container shadow flex-column align-items-center py-1 cursor-pointer text-light rounded-end">
            <MudText Class="vertical-text vertical-text me-2 ms-2">Feedback</MudText>

            <MudIcon Icon="@Icons.Material.Filled.Message" />
        </div>

    </MudDrawerContainer>
</MudPaper>
<!--Feedback End-->

@code {
    private bool _open = false;

    [Parameter]
    public string Title { get; set; } = "Feedback";
    [Parameter]
    public string SuccessMessage { get; set; } = "We’ve received your feedback. Thanks for helping us improve.";
    private FeedbackCreateDto FeedbackDto = new FeedbackCreateDto();



    protected override async Task OnInitializedAsync()
    {
        FeedbackDto.Title= Title;
    }


    private void ToggleDrawer()
    {
        _open = !_open;
    }

    private async Task OnValidSubmit()
    {
        //save the feedback
        bool isSuccess = await FeedbackService.AddFeedback(FeedbackDto);

        if(isSuccess)
        {
            FeedbackDto.Content = string.Empty;
            //show snack bar
            AppService.ShowSnackBar(message: SuccessMessage, severity: "success");
            //close the drawer
            _open = !_open;
        }
        else
        {
            var message = "An error occurred while sending your feedback. Please try again.";
            AppService.ShowSnackBar(message: message, severity: "error");
        }

      
    }
}
