@page "/Account/ConfirmEmailChange"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Clarity_Crate.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email change</PageTitle>


<div class="mt-5 container py-5">
    <MudCard Style="max-width: 500px;" Class="py-4 m-auto">
        <MudCardContent Class="text-center">
            @if (isSuccess)
            {
                
                <MudIcon Class="mb-4" Icon="fa-regular fa-square-check text-success fa-5x"/>
            }
            else
            {

                
                <MudIcon Class="mb-4" Icon="fa-solid fa-xmark text-danger fa-5x" />

            }
            
            <h2 class="card-title">Confirm your email</h2>
            @if (isSuccess)
            {

                <MudAlert Severity="Severity.Success" Variant="Variant.Outlined">@message</MudAlert>


                <p class="text-center">Your email has been confirmed. <MudButton Href="/Identity/Account/Login" Variant="Variant.Text" Color="Color.Primary">Login</MudButton> using your email to access your account.</p>

            }
            else
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@message</MudAlert>
            }
        </MudCardContent>
        <MudCardActions class="d-flex justify-content-center">
            <MudButton Variant="Variant.Filled" Color="Color.Dark">Go to Home Page</MudButton>
        </MudCardActions>
    </MudCard>
</div>




@code {
    private string? message;
    private bool isSuccess = false;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Email is null || Code is null)
        {
            RedirectManager.RedirectToWithStatus(
                "Account/Login", "Error: Invalid email change confirmation link.", HttpContext);
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            message = "Unable to find user with Id '{userId}'";
            isSuccess = false;
            return;
        }

        var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
        var result = await UserManager.ChangeEmailAsync(user, Email, code);
        if (!result.Succeeded)
        {
            message = "Error changing email.";
            isSuccess = false;
            return;
        }

        // In our UI email and user name are one and the same, so when we update the email
        // we need to update the user name.
        var setUserNameResult = await UserManager.SetUserNameAsync(user, Email);
        if (!setUserNameResult.Succeeded)
        {
            message = "Error changing user name.";
            isSuccess = false;
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        message = "Thank you for confirming your email change.";
        isSuccess = true;
    }
}
