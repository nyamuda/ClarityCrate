@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Clarity_Crate.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@rendermode InteractiveServer



<PageTitle>Log in</PageTitle>




<section class="vh-100" style="">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <MudCard Elevation="0">
                        <MudCardContent>
                            <p class="text-start fw-bold h5 mb-4">Log in to your account</p>
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <MudTextField Label="Email" @bind-Value="Input.Email" For="@(() =>Input.Email)" Variant="Variant.Outlined" />
                            </div>
                            <div class="mb-3">
                                <MudTextField Label="Password" @bind-Value="Input.Password" InputType="InputType.Password" For="@(() =>Input.Password)" Variant="Variant.Outlined" />
                            </div>
                            <div class="row mb-3">
                                <div class="col d-flex justify-content-center">
                                    <MudCheckBox @bind-Value="Input.RememberMe" Label="Remember me"></MudCheckBox>
                                </div>
                                <div class="col d-flex align-items-center">
                                    <MudLink Href="Account/ForgotPassword">Forgot password?</MudLink>
                                </div>
                            </div>
                            <MudCardActions>
                                <MudButton Size="Size.Large" FullWidth="true" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="ml-auto text-light" Style="@($"background-color:{Colors.Purple.Darken3};")">Log in</MudButton>
                            </MudCardActions>

                        </MudCardContent>
                    </MudCard>
                </EditForm>

            </div>
        </div>
    </div>
</section>
@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext != null)
        {

            if (HttpMethods.IsGet(HttpContext.Request.Method))
            {
                // Clear the existing external cookie to ensure a clean login process
                await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
