@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Clarity_Crate.Data
@using Clarity_Crate.Services

@inject UserManager<ApplicationUser> UserManager

@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject TemplateService TemplateService
@inject EmailSender EmailSender

<PageTitle>Register confirmation</PageTitle>



<StatusMessage Message="@statusMessage" />

<div class="mt-5 container py-5">
    <MudCard Style="max-width: 500px;" Class="py-4 m-auto">
        <MudCardContent Class="text-center">
            <MudIcon Class="mb-4" Icon="fas fa-envelope-open-text fa-5x" Style="@($"color:{Colors.Purple.Darken3};")" />
            <h2 class="card-title">Confirm your email</h2>
            <p class="card-text">An email has been sent to your email address.</p>
            <p class="card-text">Please check your inbox and follow the instructions to confirm your email.</p>
        </MudCardContent>
        <MudCardActions class="d-flex justify-content-center">
            <MudButton Href="/" Variant="Variant.Filled" Color="Color.Dark">Go to Home Page</MudButton>
        </MudCardActions>
    </MudCard>
</div>



@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }

        else
        {
            /*
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
               NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
               new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

            await EmailSender.SendEmailAsync(Email, "Verify email", TemplateService.ConfirmEmail(emailConfirmationLink)); */
        }
        /*
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }

        */
    }
}
